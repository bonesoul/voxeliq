<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.Toolkit.Graphics</name>
    </assembly>
    <members>
        <member name="T:SharpDX.Toolkit.Graphics.AssemblyDoc">
            <summary>
            The <see cref="A:SharpDX.Toolkit.Graphics"/> assembly provides a high level Direct3D11 API.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.BlendState">
            <summary>
            BlendState is equivalent to <see cref="T:SharpDX.Direct3D11.BlendState"/>.
            </summary>
            <remarks>
            This class provides default stock blend states and easier constructors. It is also associating the <see cref="F:SharpDX.Toolkit.Graphics.BlendState.BlendFactor"/> and <see cref="F:SharpDX.Toolkit.Graphics.BlendState.MultiSampleMask"/> into the same object.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsResource">
            <summary>
            Base class for all <see cref="T:SharpDX.Toolkit.Graphics.GraphicsResource"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsResource.GraphicsDevice">
            <summary>
            GraphicsDevice used to create this instance.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsResource.Resource">
            <summary>
            The attached Direct3D11 resource to this instance.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.Initialize(SharpDX.Direct3D11.DeviceChild)">
            <summary>
            Initializes the specified device local.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.op_Implicit(SharpDX.Toolkit.Graphics.GraphicsResource)~SharpDX.Direct3D11.Resource">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Resource"/>
            </summary>
            <param name="from">The GraphicsResource to convert from.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.GetCputAccessFlagsFromUsage(SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Gets the CPU access flags from the <see cref="T:SharpDX.Direct3D11.ResourceUsage"/>.
            </summary>
            <param name="usage">The usage.</param>
            <returns>The CPU access flags</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsResource.OnNameChanged">
            <summary>
            Called when name changed for this component.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BlendState.Description">
            <summary>
            Gets the description of this blend state.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BlendState.BlendFactor">
            <summary>
            RGBA component. This requires a blend state object that specifies the <see cref="F:SharpDX.Direct3D11.BlendOption.BlendFactor"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BlendState.MultiSampleMask">
            <summary>
            <p>Blend state is used by the output-merger stage to determine how to blend together two pixel values. The two values are commonly the current pixel value and the pixel value already in the output render target. Use the <strong>blend operation</strong> to control where the two pixel values come from and how they are mathematically combined.</p><p>To create a blend-state interface, call <strong><see cref="M:SharpDX.Direct3D11.Device.CreateBlendState(SharpDX.Direct3D11.BlendStateDescription@,SharpDX.Direct3D11.BlendState)"/></strong>.</p><p>Passing in <strong><c>null</c></strong> for the blend-state interface indicates to the runtime to set a default blending state.  The following table indicates the default blending parameters.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>AlphaToCoverageEnable</td><td><strong><see cref="F:SharpDX.Result.False"/></strong></td></tr> <tr><td>BlendEnable</td><td><strong><see cref="F:SharpDX.Result.False"/></strong>[8]</td></tr> <tr><td>SrcBlend</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DstBlend</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOp</td><td><see cref="F:SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>SrcBlendAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DstBlendAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOpAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTargetWriteMask[8]</td><td><see cref="F:SharpDX.Direct3D11.ColorWriteMaskFlags.All"/>[8]</td></tr> </table><p>?</p><p>A sample mask determines which samples get updated in all the active render targets. The mapping of bits in a sample mask to samples in a multisample render target is the responsibility of an individual application. A sample mask is always applied; it is independent of whether multisampling is enabled, and does not depend on whether an application uses multisample render targets.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p>	
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.BlendStateDescription,SharpDX.Color4,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> class.
            </summary>
            <param name="device">The device local.</param>
            <param name="description">The description.</param>
            <param name="blendFactor">The blend factor.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.BlendState,SharpDX.Color4,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> class.
            </summary>
            <param name="device">The device local.</param>
            <param name="nativeState">State of the native.</param>
            <param name="blendFactor">The blend factor.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.RenderTargetBlendDescription,SharpDX.Color4,System.Int32)">
            <summary>
            <p>Create a blend-state object that encapsules blend state for the output-merger stage.</p>
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="renderTargetBlend0">The render target blend description for the first render target.</param>
            <param name="blendFactor">The blend factor.</param>
            <param name="mask">The mask.</param>
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> instance.</returns>
            <msdn-id>ff476500</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateBlendState([In] const D3D11_BLEND_DESC* pBlendStateDesc,[Out, Fast] ID3D11BlendState** ppBlendState)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateBlendState</unmanaged-short>
            <remarks><p>An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object  has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object.</p></remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.RenderTargetBlendDescription,System.Int32)">
            <summary>
            <p>Create a blend-state object that encapsules blend state for the output-merger stage.</p>
            </summary>
            <param name="device">The  <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="renderTargetBlend0">The render target blend description for the first render target.</param>
            <param name="mask">The mask.</param>
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> instance.</returns>
            <msdn-id>ff476500</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateBlendState([In] const D3D11_BLEND_DESC* pBlendStateDesc,[Out, Fast] ID3D11BlendState** ppBlendState)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateBlendState</unmanaged-short>
            <remarks><p>An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object  has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object.</p></remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOperation,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOperation,SharpDX.Direct3D11.ColorWriteMaskFlags,System.Int32)">
            <summary>
            <p>Create a blend-state object that encapsules blend state for the output-merger stage.</p>
            </summary>
            <param name="device">The  <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="sourceBlend">The source blend.</param>
            <param name="destinationBlend">The destination blend.</param>
            <param name="blendOperation">The blend operation.</param>
            <param name="sourceAlphaBlend">The source alpha blend.</param>
            <param name="destinationAlphaBlend">The destination alpha blend.</param>
            <param name="alphaBlendOperation">The alpha blend operation.</param>
            <param name="renderTargetWriteMask">The render target write mask.</param>
            <param name="mask">The mask.</param>
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> instance.</returns>
            <msdn-id>ff476500</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateBlendState([In] const D3D11_BLEND_DESC* pBlendStateDesc,[Out, Fast] ID3D11BlendState** ppBlendState)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateBlendState</unmanaged-short>
            <remarks><p>An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object  has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object.</p></remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOperation,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOperation,SharpDX.Direct3D11.ColorWriteMaskFlags,SharpDX.Color4,System.Int32)">
            <summary>
            <p>Create a blend-state object that encapsules blend state for the output-merger stage.</p>
            </summary>
            <param name="device">The  <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="sourceBlend">The source blend.</param>
            <param name="destinationBlend">The destination blend.</param>
            <param name="blendOperation">The blend operation.</param>
            <param name="sourceAlphaBlend">The source alpha blend.</param>
            <param name="destinationAlphaBlend">The destination alpha blend.</param>
            <param name="alphaBlendOperation">The alpha blend operation.</param>
            <param name="renderTargetWriteMask">The render target write mask.</param>
            <param name="blendFactor">The blend factor.</param>
            <param name="mask">The mask.</param>
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> instance.</returns>
            <msdn-id>ff476500</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateBlendState([In] const D3D11_BLEND_DESC* pBlendStateDesc,[Out, Fast] ID3D11BlendState** ppBlendState)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateBlendState</unmanaged-short>
            <remarks><p>An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object  has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object.</p></remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.BlendStateDescription,System.Int32)">
            <summary>
            <p>Create a blend-state object that encapsules blend state for the output-merger stage.</p>
            </summary>
            <param name="device">The  <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description"><dd>  <p>Pointer to a blend-state description (see <strong><see cref="T:SharpDX.Direct3D11.BlendStateDescription"/></strong>).</p> </dd></param>
            <param name="mask">The mask.</param>
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> instance.</returns>
            <msdn-id>ff476500</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateBlendState([In] const D3D11_BLEND_DESC* pBlendStateDesc,[Out, Fast] ID3D11BlendState** ppBlendState)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateBlendState</unmanaged-short>
            <remarks><p>An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object  has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object.</p></remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Direct3D11.BlendStateDescription,System.Int32)">
            <summary>
            <p>Create a blend-state object that encapsules blend state for the output-merger stage.</p>
            </summary>
            <param name="device">The  <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="name">Name of this blend state.</param>
            <param name="description"><dd>  <p>Pointer to a blend-state description (see <strong><see cref="T:SharpDX.Direct3D11.BlendStateDescription"/></strong>).</p> </dd></param>
            <param name="mask">The mask.</param>
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> instance.</returns>
            <msdn-id>ff476500</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateBlendState([In] const D3D11_BLEND_DESC* pBlendStateDesc,[Out, Fast] ID3D11BlendState** ppBlendState)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateBlendState</unmanaged-short>
            <remarks><p>An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object  has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object.</p></remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.BlendStateDescription,SharpDX.Color4,System.Int32)">
            <summary>
            <p>Create a blend-state object that encapsules blend state for the output-merger stage.</p>
            </summary>
            <param name="device">The  <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description"><dd>  <p>Pointer to a blend-state description (see <strong><see cref="T:SharpDX.Direct3D11.BlendStateDescription"/></strong>).</p> </dd></param>
            <param name="blendFactor">The blend factor.</param>
            <param name="mask">The mask.</param>
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> instance.</returns>
            <msdn-id>ff476500</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateBlendState([In] const D3D11_BLEND_DESC* pBlendStateDesc,[Out, Fast] ID3D11BlendState** ppBlendState)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateBlendState</unmanaged-short>
            <remarks><p>An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object  has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object.</p></remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendState.op_Implicit(SharpDX.Toolkit.Graphics.BlendState)~SharpDX.Direct3D11.BlendState">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Resource"/>
            </summary>
            <param name="from">The GraphicsState to convert from.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.BlendStateCollection">
            <summary>
            Blend state collection
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.StateCollectionBase`1">
            <summary>
            Base collection for Graphics device states (BlendState, DepthStencilState, RasterizerState).
            </summary>
            <typeparam name="T">Type of the state.</typeparam>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ComponentCollection`1">
            <summary>
            A generic collection for effect framework.
            </summary>
            <typeparam name="T">Type of the collection</typeparam>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.ComponentCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.ComponentCollection`1.Add(System.String,`0)">
            <summary>
            Adds the specified item with a prefix name (used for techniques inside pool).
            Name will be added to collection with "PrefixName|ItemName" unless prefixname is empty ("ItemName").
            </summary>
            <param name="prefixName">The name.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.ComponentCollection`1.Contains(System.String)">
            <summary>
            Determines whether this collection contains an element with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [contains] an element with the specified name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.ComponentCollection`1.Count">
            <summary>
            Gets the number of objects in the collection.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.ComponentCollection`1.Item(System.Int32)">
            <summary>Gets a specific element in the collection by using an index value.</summary>
            <param name="index">Index of the EffectTechnique to get.</param>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.ComponentCollection`1.Item(System.String)">
            <summary>Gets a specific element in the collection by using a name.</summary>
            <param name="name">Name of the EffectTechnique to get.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.StateCollectionBase`1.GraphicsDevice">
            <summary>
            Gets the graphics device associated with this collection.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.StateCollectionBase`1.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.StateCollectionBase`1"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.StateCollectionBase`1.StateAllocatorCallback">
            <summary>
            Sets this callback to create a state when a state with a particular name is not found.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.StateCollectionBase`1.Register(`0)">
            <summary>
            Registers the specified state.
            </summary>
            <param name="state">The state.</param>
            <remarks>
            The name of the state must be defined.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.StateCollectionBase`1.StateAllocatorDelegate">
            <summary>
            An allocator of state.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name of the state to create.</param>
            <returns>An instsance of T or null if not supported.</returns>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BlendStateCollection.Additive">
            <summary>
            A built-in state object with settings for additive blend, that is adding the destination data to the source data without using alpha.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BlendStateCollection.AlphaBlend">
            <summary>
            A built-in state object with settings for alpha blend, that is blending the source and destination data using alpha.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BlendStateCollection.NonPremultiplied">
            <summary>
            A built-in state object with settings for blending with non-premultipled alpha, that is blending source and destination data using alpha while assuming the color data contains no alpha information.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BlendStateCollection.Opaque">
            <summary>
            A built-in state object with settings for opaque blend, that is overwriting the source with the destination data.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BlendStateCollection.Default">
            <summary>
            A built-in default state object (no blending).
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BlendStateCollection.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.BlendStateCollection"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ClearOptions">
            <summary>
            Specifies the buffer to use when using <see cref="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Clear(SharpDX.Color4)"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ClearOptions.DepthBuffer">
            <summary>
            Clears the depth buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ClearOptions.Stencil">
            <summary>
            Clears the stencil buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ClearOptions.Target">
            <summary>
            Clears the render target buffer.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.NamespaceDoc">
            <summary>
            The <see cref="N:SharpDX.Toolkit.Graphics"/> namespace provides a high level Direct3D11 Graphics API.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PrimitiveBatch`1">
            <summary>
            Primitive batch implementation using generic.
            </summary>
            <typeparam name="T">Type of a Vertex element</typeparam>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PrimitiveBatchBase">
            <summary>
            Primitive batch base class.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveBatchBase.VertexSize">
            <summary>
            Size in bytes of a vertex.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatchBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.PrimitiveBatchBase"/> class.
            </summary>
            <param name="graphicsDevice">The device.</param>
            <param name="maxIndices">The max indices.</param>
            <param name="maxVertices">The max vertices.</param>
            <param name="vertexSize">Size of the vertex.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatchBase.Begin">
            <summary>
            Begin a batch of primitive drawing operations.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot nest Begin calls</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatchBase.End">
            <summary>
            Ends batch of primitive drawing operations.
            </summary>
            <exception cref="T:System.InvalidOperationException">Begin must be called before End</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatchBase.Draw(SharpDX.Direct3D.PrimitiveTopology,System.Boolean,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Draws the specified topology.
            </summary>
            <param name="topology">The topology.</param>
            <param name="isIndexed">if set to <c>true</c> [is indexed].</param>
            <param name="indices">The indices.</param>
            <param name="indexCount">The index count.</param>
            <param name="vertexCount">The vertex count.</param>
            <returns>IntPtr.</returns>
            <exception cref="T:System.ArgumentNullException">Indices cannot be null</exception>
            <exception cref="T:System.ArgumentException">Too many indices;indexCount</exception>
            <exception cref="T:System.InvalidOperationException">Begin must be called before Draw</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatchBase.FlushBatch">
            <summary>
            Flushes the batch.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatchBase.LockBuffer(SharpDX.Toolkit.Graphics.Buffer,System.Int32)">
            <summary>
            Locks a vertex or index buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="currentPosition">The current position.</param>
            <returns>A DataBox.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PrimitiveBatchBase.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveBatch`1.QuadIndices">
            <summary>
            The quad indices
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatch`1.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.PrimitiveBatch`1"/> class.
            </summary>
            <param name="graphicsDevice">The device.</param>
            <param name="maxIndices">The max indices.</param>
            <param name="maxVertices">The max vertices.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatch`1.Draw(SharpDX.Toolkit.Graphics.PrimitiveType,`0[])">
            <summary>
            Draws vertices for the specified topology.
            </summary>
            <param name="topology">The topology.</param>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatch`1.DrawIndexed(SharpDX.Toolkit.Graphics.PrimitiveType,System.Int16[],`0[])">
            <summary>
            Draws the indexed vertices with the specified toplogy.
            </summary>
            <param name="topology">The topology.</param>
            <param name="indices">The indices.</param>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatch`1.DrawLine(`0,`0)">
            <summary>
            Draws a line.
            </summary>
            <param name="v1">The v1 starting point.</param>
            <param name="v2">The v2 end point.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatch`1.DrawTriangle(`0,`0,`0)">
            <summary>
            Draws a triangle (points must be ordered in CW or CCW depending on rasterizer settings).
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveBatch`1.DrawQuad(`0,`0,`0,`0)">
            <summary>
            Draws a quad (points must be ordered in CW or CCW depending on rasterizer settings).
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTargetGraphicsPresenter">
            <summary>
            Graphics presenter for SwapChain.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsPresenter">
            <summary>
            This class is a frontend to <see cref="T:SharpDX.DXGI.SwapChain"/> and <see cref="T:SharpDX.DXGI.SwapChain1"/>.
            </summary>
            <remarks>
            In order to create a new <see cref="T:SharpDX.Toolkit.Graphics.GraphicsPresenter"/>, a <see cref="P:SharpDX.Toolkit.Graphics.GraphicsPresenter.GraphicsDevice"/> should have been initialized first.
            </remarks>
            <msdn-id>bb174569</msdn-id>	
            <unmanaged>IDXGISwapChain</unmanaged>	
            <unmanaged-short>IDXGISwapChain</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsPresenter.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.PresentationParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.GraphicsPresenter"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="presentationParameters"> </param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsPresenter.Present">
            <summary>
            Presents the Backbuffer to the screen.
            </summary>
            <msdn-id>bb174576</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::Present([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS Flags)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::Present</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsPresenter.Resize(System.Int32,System.Int32,SharpDX.DXGI.Format)">
            <summary>
            Resizes the current presenter, by resizing the back buffer and the depth stencil buffer.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsPresenter.CreateDepthStencilBuffer">
            <summary>
            Creates the depth stencil buffer.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsPresenter.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsPresenter.Description">
            <summary>
            Gets the description of this presenter.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsPresenter.BackBuffer">
            <summary>
            Gets the default back buffer for this presenter.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsPresenter.DepthStencilBuffer">
            <summary>
            Gets the default depth stencil buffer for this presenter.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsPresenter.NativePresenter">
            <summary>
            Gets the underlying native presenter (can be a <see cref="T:SharpDX.DXGI.SwapChain"/> or <see cref="T:SharpDX.DXGI.SwapChain1"/> or null, depending on the platform).
            </summary>
            <value>The native presenter.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsPresenter.IsFullScreen">
            <summary>
            Gets or sets fullscreen mode for this presenter.
            </summary>
            <value><c>true</c> if this instance is full screen; otherwise, <c>false</c>.</value>
            <msdn-id>bb174579</msdn-id>
              <unmanaged>HRESULT IDXGISwapChain::SetFullscreenState([In] BOOL Fullscreen,[In, Optional] IDXGIOutput* pTarget)</unmanaged>
              <unmanaged-short>IDXGISwapChain::SetFullscreenState</unmanaged-short>
            <remarks>This method is only valid on Windows Desktop and has no effect on Windows Metro.</remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsPresenter.PresentInterval">
            <summary>
            Gets or sets the <see cref="P:SharpDX.Toolkit.Graphics.GraphicsPresenter.PresentInterval"/>. Default is to wait for one vertical blanking.
            </summary>
            <value>The present interval.</value>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectContentReader">
            <summary>
            Internal class to load a Effect.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsResourceContentReaderBase`1">
            <summary>
            Base class for all GraphicsResource content reader.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsDeviceStatus">
            <summary>
            Describes the current status of a <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceStatus.Normal">
            <summary>
            The device is running fine.
            </summary>
            <msdn-id>bb509553</msdn-id>	
            <unmanaged>S_OK</unmanaged>	
            <unmanaged-short>S_OK</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceStatus.Removed">
            <summary>
            The video card has been physically removed from the system, or a driver upgrade for the video card has occurred. The application should destroy and recreate the device.
            </summary>
            <msdn-id>bb509553</msdn-id>	
            <unmanaged>DXGI_ERROR_DEVICE_REMOVED</unmanaged>	
            <unmanaged-short>DXGI_ERROR_DEVICE_REMOVED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceStatus.Hung">
            <summary>
            The application's device failed due to badly formed commands sent by the application. This is an design-time issue that should be investigated and fixed.
            </summary>
            <msdn-id>bb509553</msdn-id>	
            <unmanaged>DXGI_ERROR_DEVICE_HUNG</unmanaged>	
            <unmanaged-short>DXGI_ERROR_DEVICE_HUNG</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceStatus.Reset">
            <summary>
            The device failed due to a badly formed command. This is a run-time issue; The application should destroy and recreate the device.
            </summary>
            <msdn-id>bb509553</msdn-id>	
            <unmanaged>DXGI_ERROR_DEVICE_RESET</unmanaged>	
            <unmanaged-short>DXGI_ERROR_DEVICE_RESET</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceStatus.InternalError">
            <summary>
            The driver encountered a problem and was put into the device removed state.
            </summary>
            <msdn-id>bb509553</msdn-id>	
            <unmanaged>DXGI_ERROR_DRIVER_INTERNAL_ERROR</unmanaged>	
            <unmanaged-short>DXGI_ERROR_DRIVER_INTERNAL_ERROR</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceStatus.InvalidCall">
            <summary>
            The application provided invalid parameter data; this must be debugged and fixed before the application is released.
            </summary>
            <msdn-id>bb509553</msdn-id>	
            <unmanaged>DXGI_ERROR_INVALID_CALL</unmanaged>	
            <unmanaged-short>DXGI_ERROR_INVALID_CALL</unmanaged-short>	
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PrimitiveQuad">
            <summary>
            Primitive quad use to draw an effect on a quad (fullscreen by default). This is directly accessible from the <see cref="!:GraphicsDevice.DrawQuad"/> method.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveQuad.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.PrimitiveQuad"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveQuad.Draw">
            <summary>
            Draws a quad. The effect must have been applied before calling this method with pixel shader having the signature float2:TEXCOORD.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveQuad.Draw(SharpDX.Toolkit.Graphics.Effect)">
            <summary>
            Draws the specified effect onto the quad. The effect must have a pixel shader with the signature float2:TEXCOORD.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveQuad.Draw(SharpDX.Toolkit.Graphics.EffectPass)">
            <summary>
            Draws the specified effect pass onto the quad. The effect pass must have a pixel shader with the signature float2:TEXCOORD.
            </summary>
            <param name="effectPass">The effect pass.</param>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PrimitiveQuad.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PrimitiveQuad.Transform">
            <summary>
            Gets or sets the transform. Default is <see cref="F:SharpDX.Matrix.Identity"/>.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PrimitiveQuad.SharedData">
            <summary>
            Internal structure used to store VertexBuffer and VertexInputLayout.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveQuad.SharedData.VertexBuffer">
            <summary>
            The vertex buffer
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveQuad.SharedData.VertexInputLayout">
            <summary>
            The vertex input layout
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SwapChainGraphicsPresenter">
            <summary>
            Graphics presenter for SwapChain.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.IGraphicsDeviceService">
            <summary>
            Service providing method to access GraphicsDevice life-cycle.
            </summary>
        </member>
        <member name="E:SharpDX.Toolkit.Graphics.IGraphicsDeviceService.DeviceCreated">
            <summary>
            Occurs when a device is created.
            </summary>
        </member>
        <member name="E:SharpDX.Toolkit.Graphics.IGraphicsDeviceService.DeviceDisposing">
            <summary>
            Occurs when a device is disposing.
            </summary>
        </member>
        <member name="E:SharpDX.Toolkit.Graphics.IGraphicsDeviceService.DeviceReset">
            <summary>
            Occurs when a device is reseted.
            </summary>
        </member>
        <member name="E:SharpDX.Toolkit.Graphics.IGraphicsDeviceService.DeviceResetting">
            <summary>
            Occurs when a device is resetting.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.IGraphicsDeviceService.GraphicsDevice">
            <summary>
            Gets the current graphcs device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ImageContentReader">
            <summary>
            Content reader for an image.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RasterizerStateCollection">
            <summary>
            Rasterizer state collection.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.RasterizerStateCollection.CullFront">
            <summary>
            Built-in raterizer state object with settings for culling primitives with clockwise winding order (front facing).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.RasterizerStateCollection.CullBack">
            <summary>
            Built-in raterizer state object with settings for culling primitives with counter-clockwise winding order (back facing).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.RasterizerStateCollection.CullNone">
            <summary>
            Built-in raterizer state object with settings for not culling any primitives.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.RasterizerStateCollection.Default">
            <summary>
            Built-in default raterizer state object is back facing (see <see cref="F:SharpDX.Toolkit.Graphics.RasterizerStateCollection.CullBack"/>).
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RasterizerStateCollection.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.RasterizerStateCollection"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SamplerStateCollection">
            <summary>
            Sampler state collection.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SamplerStateCollection.Default">
            <summary>
            Default state is using linear filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SamplerStateCollection.PointWrap">
            <summary>
            Point filtering with texture coordinate wrapping.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SamplerStateCollection.PointClamp">
            <summary>
            Point filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SamplerStateCollection.LinearWrap">
            <summary>
            Linear filtering with texture coordinate wrapping.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SamplerStateCollection.LinearClamp">
            <summary>
            Linear filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SamplerStateCollection.AnisotropicWrap">
            <summary>
            Anisotropic filtering with texture coordinate wrapping.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SamplerStateCollection.AnisotropicClamp">
            <summary>
            Anisotropic filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SamplerStateCollection.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.SamplerStateCollection"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DepthStencilStateCollection">
            <summary>
            Depth-stencil state collection.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilStateCollection.Default">
            <summary>
            A built-in state object with default settings for using a depth stencil buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilStateCollection.DepthRead">
            <summary>
            A built-in state object with settings for enabling a read-only depth stencil buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilStateCollection.None">
            <summary>
            A built-in state object with settings for not using a depth stencil buffer.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilStateCollection.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilStateCollection"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SetDataOptions">
            <summary>
            Describes whether existing vertex or index buffer data will be overwritten or discarded during a SetData operation.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SetDataOptions.None">
            <summary>
            Portions of existing data in the buffer may be overwritten during this operation.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SetDataOptions.Discard">
            <summary>
            The SetData operation will discard the entire buffer. A pointer to a new memory area is returned so that the direct memory access (DMA) and rendering from the previous area do not stall.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SetDataOptions.NoOverwrite">
            <summary>
            The SetData operation will not overwrite existing data in the vertex and index buffers. Specifying this option allows the driver to return immediately from a SetData operation and continue rendering.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SharedDataType">
            <summary>
            Type of shared data. <see cref="M:SharpDX.Toolkit.Graphics.GraphicsDevice.GetOrCreateSharedData``1(SharpDX.Toolkit.Graphics.SharedDataType,System.Object,SharpDX.Toolkit.Graphics.GraphicsDevice.CreateSharedData{``0})"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SharedDataType.PerDevice">
            <summary>
            Data is shared within a <see cref="T:SharpDX.Direct3D11.Device"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SharedDataType.PerContext">
            <summary>
            Data is shared within a <see cref="T:SharpDX.Direct3D11.DeviceContext"/>
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SpriteBatch">
            <summary>
            Renders a group of sprites.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.SpriteBatch"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Begin(SharpDX.Toolkit.Graphics.SpriteSortMode,SharpDX.Toolkit.Graphics.Effect)">
            <summary>
            Begins a sprite batch operation using deferred sort and default state objects (BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise).
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Begin(SharpDX.Toolkit.Graphics.SpriteSortMode,SharpDX.Toolkit.Graphics.BlendState)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state. Other states are sets to default (DepthStencilState.None, SamplerState.LinearClamp, RasterizerState.CullCounterClockwise). If you pass a null blend state, the default is BlendState.AlphaBlend.
            </summary>
            <param name="sortMode">Sprite drawing order.</param>
            <param name="blendState">Blending options.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Begin(SharpDX.Toolkit.Graphics.SpriteSortMode,SharpDX.Toolkit.Graphics.BlendState,SharpDX.Toolkit.Graphics.SamplerState,SharpDX.Toolkit.Graphics.DepthStencilState,SharpDX.Toolkit.Graphics.RasterizerState)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil and rasterizer state objects. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise).
            </summary>
            <param name="sortMode">Sprite drawing order.</param>
            <param name="blendState">Blending options.</param>
            <param name="samplerState">Texture sampling options.</param>
            <param name="depthStencilState">Depth and stencil options.</param>
            <param name="rasterizerState">Rasterization options.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Begin(SharpDX.Toolkit.Graphics.SpriteSortMode,SharpDX.Toolkit.Graphics.BlendState,SharpDX.Toolkit.Graphics.SamplerState,SharpDX.Toolkit.Graphics.DepthStencilState,SharpDX.Toolkit.Graphics.RasterizerState,SharpDX.Toolkit.Graphics.Effect)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil and rasterizer state objects, plus a custom effect. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). Passing a null effect selects the default SpriteBatch Class shader.
            </summary>
            <param name="sortMode">Sprite drawing order.</param>
            <param name="blendState">Blending options.</param>
            <param name="samplerState">Texture sampling options.</param>
            <param name="depthStencilState">Depth and stencil options.</param>
            <param name="rasterizerState">Rasterization options.</param>
            <param name="effect">Effect state options.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Begin(SharpDX.Toolkit.Graphics.SpriteSortMode,SharpDX.Toolkit.Graphics.BlendState,SharpDX.Toolkit.Graphics.SamplerState,SharpDX.Toolkit.Graphics.DepthStencilState,SharpDX.Toolkit.Graphics.RasterizerState,SharpDX.Toolkit.Graphics.Effect,SharpDX.Matrix)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil, rasterizer state objects, plus a custom effect and a 2D transformation matrix. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). Passing a null effect selects the default SpriteBatch Class shader. 
            </summary>
            <param name="sortMode">Sprite drawing order.</param>
            <param name="blendState">Blending options.</param>
            <param name="samplerState">Texture sampling options.</param>
            <param name="depthStencilState">Depth and stencil options.</param>
            <param name="rasterizerState">Rasterization options.</param>
            <param name="effect">Effect state options.</param>
            <param name="transformMatrix">Transformation matrix for scale, rotate, translate options.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Draw(SharpDX.Direct3D11.ShaderResourceView,SharpDX.DrawingRectangle,SharpDX.Color)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, destination rectangle, and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">A rectangle that specifies (in screen coordinates) the destination for drawing the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <remarks>
            Before making any calls to Draw, you must call Begin. Once all calls to Draw are complete, call End. 
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Draw(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Vector2,SharpDX.Color)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Draw(SharpDX.Direct3D11.ShaderResourceView,SharpDX.DrawingRectangle,System.Nullable{SharpDX.DrawingRectangle},SharpDX.Color,System.Single,SharpDX.Vector2,SharpDX.Toolkit.Graphics.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, destination rectangle, source rectangle, color, rotation, origin, effects and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">A rectangle that specifies (in screen coordinates) the destination for drawing the sprite. If this rectangle is not the same size as the source rectangle, the sprite will be scaled to fit.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Draw(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Vector2,System.Nullable{SharpDX.DrawingRectangle},SharpDX.Color)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Draw(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Vector2,System.Nullable{SharpDX.DrawingRectangle},SharpDX.Color,System.Single,SharpDX.Vector2,System.Single,SharpDX.Toolkit.Graphics.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.Draw(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Vector2,System.Nullable{SharpDX.DrawingRectangle},SharpDX.Color,System.Single,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Toolkit.Graphics.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.DrawString(SharpDX.Toolkit.Graphics.SpriteFont,System.String,SharpDX.Vector2,SharpDX.Color)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for diplaying text.</param>
            <param name="text">A text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.DrawString(SharpDX.Toolkit.Graphics.SpriteFont,System.Text.StringBuilder,SharpDX.Vector2,SharpDX.Color)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for diplaying text.</param>
            <param name="text">Text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.DrawString(SharpDX.Toolkit.Graphics.SpriteFont,System.String,SharpDX.Vector2,SharpDX.Color,System.Single,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Toolkit.Graphics.SpriteEffects,System.Single)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for diplaying text.</param>
            <param name="text">A text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.DrawString(SharpDX.Toolkit.Graphics.SpriteFont,System.String,SharpDX.Vector2,SharpDX.Color,System.Single,SharpDX.Vector2,System.Single,SharpDX.Toolkit.Graphics.SpriteEffects,System.Single)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for diplaying text.</param>
            <param name="text">A text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.DrawString(SharpDX.Toolkit.Graphics.SpriteFont,System.Text.StringBuilder,SharpDX.Vector2,SharpDX.Color,System.Single,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Toolkit.Graphics.SpriteEffects,System.Single)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for diplaying text.</param>
            <param name="text">Text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.DrawString(SharpDX.Toolkit.Graphics.SpriteFont,System.Text.StringBuilder,SharpDX.Vector2,SharpDX.Color,System.Single,SharpDX.Vector2,System.Single,SharpDX.Toolkit.Graphics.SpriteEffects,System.Single)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for diplaying text.</param>
            <param name="text">Text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteBatch.End">
            <summary>
            Flushes the sprite batch and restores the device state to how it was before Begin was called. 
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SpriteBatch.ResourceContext">
            <summary>
            Use a ResourceContext per GraphicsDevice (DeviceContext)
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SpriteBatch.TextureInfo">
            <summary>
            Internal structure used to store texture information.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SpriteEffects">
            <summary>
            Defines sprite mirroring options.
            </summary>
            <remarks>
            Description is taken from original XNA <a href='http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.spriteeffects.aspx'>SpriteEffects</a> class.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SpriteEffects.None">
            <summary>
            No rotations specified.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SpriteEffects.FlipHorizontally">
            <summary>
            Rotate 180 degrees around the Y axis before rendering.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SpriteEffects.FlipVertically">
            <summary>
            Rotate 180 degrees around the X axis before rendering.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SpriteEffects.FlipBoth">
            <summary>
            Rotate 180 degress around both the X and Y axis before rendering.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SpriteFont">
            <summary>
            Represents a font texture.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteFont.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.IO.Stream,SharpDX.Toolkit.Graphics.SpriteFontBitmapDataLoaderDelegate)">
            <summary>
            Loads an <see cref="T:SharpDX.Toolkit.Graphics.EffectData"/> from the specified stream.
            </summary>
            <param name="device">The graphics device</param>
            <param name="stream">The stream.</param>
            <param name="bitmapDataLoader">A delegate to load bitmap data that are not stored in the buffer.</param>
            <returns>An <see cref="T:SharpDX.Toolkit.Graphics.EffectData"/>. Null if the stream is not a serialized <see cref="T:SharpDX.Toolkit.Graphics.EffectData"/>.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteFont.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Byte[],SharpDX.Toolkit.Graphics.SpriteFontBitmapDataLoaderDelegate)">
            <summary>
            Loads an <see cref="T:SharpDX.Toolkit.Graphics.EffectData"/> from the specified buffer.
            </summary>
            <param name="device">The graphics device</param>
            <param name="buffer">The buffer.</param>
            <param name="bitmapDataLoader">A delegate to load bitmap data that are not stored in the buffer.</param>
            <returns>An <see cref="T:SharpDX.Toolkit.Graphics.EffectData"/> </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteFont.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String)">
            <summary>
            Loads an <see cref="T:SharpDX.Toolkit.Graphics.EffectData"/> from the specified file.
            </summary>
            <param name="device">The graphics device</param>
            <param name="fileName">The filename.</param>
            <returns>An <see cref="T:SharpDX.Toolkit.Graphics.EffectData"/> </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteFont.MeasureString(System.String)">
            <summary>Returns the width and height of a string as a Vector2.</summary>
            <param name="text">The string to measure.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder)">
            <summary>Returns the width and height of a string as a Vector2.</summary>
            <param name="text">The string to measure.</param>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SpriteFont.Characters">
            <summary>Gets a collection of all the characters that are included in the font.</summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SpriteFont.DefaultCharacter">
            <summary>Gets or sets the default character for the font.</summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SpriteFont.LineSpacing">
            <summary>Gets or sets the vertical distance (in pixels) between the base lines of two consecutive lines of text. Line spacing includes the blank space between lines as well as the height of the characters.</summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SpriteFont.Spacing">
            <summary>Gets or sets the spacing of the font characters.</summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SpriteFontContentReader">
            <summary>
            Internal class to load a SpriteFont.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SpriteSortMode">
            <summary>
            Defines sprite sort-rendering options. 
            </summary>
            <remarks>
            Description is taken from original XNA <a href='http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.spritesortmode.aspx'>SpriteBatch</a> class.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SpriteSortMode.Deferred">
            <summary>
            Sprites are not drawn until End is called. 
            End will apply graphics device settings and draw all the sprites in one batch, in the same order calls to Draw were received. 
            This mode allows Draw calls to two or more instances of SpriteBatch without introducing conflicting graphics device settings. SpriteBatch defaults to Deferred mode.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SpriteSortMode.Immediate">
            <summary>
            Begin will apply new graphics device settings, and sprites will be drawn within each Draw call. In Immediate mode there can only be one active SpriteBatch instance without introducing conflicting device settings. 
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SpriteSortMode.Texture">
            <summary>
            Same as Deferred mode, except sprites are sorted by texture prior to drawing. This can improve performance when drawing non-overlapping sprites of uniform depth.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SpriteSortMode.BackToFront">
            <summary>
            Same as Deferred mode, except sprites are sorted by depth in back-to-front order prior to drawing. This procedure is recommended when drawing transparent sprites of varying depths.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SpriteSortMode.FrontToBack">
            <summary>
            Same as Deferred mode, except sprites are sorted by depth in front-to-back order prior to drawing. This procedure is recommended when drawing opaque sprites of varying depths.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Buffer">
            <summary>
            All-in-One Buffer class linked <see cref="T:SharpDX.Direct3D11.Buffer"/>.
            </summary>
            <remarks>
            This class is able to create constant buffers, index buffers, vertex buffers, structured buffer, raw buffers, argument buffers.
            </remarks>
            <msdn-id>ff476351</msdn-id>	
            <unmanaged>ID3D11Buffer</unmanaged>	
            <unmanaged-short>ID3D11Buffer</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Buffer.Description">
            <summary>
            Gets the description of this buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Buffer.ElementCount">
            <summary>
            Gets the number of elements.
            </summary>
            <remarks>
            This value is valid for structured buffers, raw buffers and index buffers that are used as a SharedResourceView.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Buffer.ElementSize">
            <summary>
            Gets the size of element T.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Buffer.BufferFlags">
            <summary>
            Gets the type of this buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Buffer.ViewFormat">
            <summary>
            Gets the default view format of this buffer.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.BufferDescription,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Toolkit.Graphics.PixelFormat,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <param name="bufferFlags">Type of the buffer.</param>
            <param name="viewFormat">The view format.</param>
            <param name="dataPointer">The data pointer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Buffer,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="nativeBuffer">The native buffer.</param>
            <param name="bufferFlags">Type of the buffer.</param>
            <param name="viewFormat">The view format.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns>A new instance of this buffer as a staging resource</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A clone of this instance</returns>
            <remarks>
            This method will not copy the content of the buffer to the clone
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.GetShaderResourceView(SharpDX.Toolkit.Graphics.PixelFormat,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> for a particular <see cref="T:SharpDX.Toolkit.Graphics.PixelFormat"/>.
            </summary>
            <param name="viewFormat">The view format.</param>
            <param name="firstElement">The first element of the view.</param>
            <param name="elementCount">The number of elements accessible from the view.</param>
            <returns>A <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> for the particular view format.</returns>
            <remarks>
            The buffer must have been declared with <see cref="F:SharpDX.Toolkit.Graphics.BufferFlags.ShaderResource"/>. 
            The ShaderResourceView instance is kept by this buffer and will be disposed when this buffer is disposed.
            </remarks>
            <msdn-id>ff476519</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateShaderResourceView([In] ID3D11Resource* pResource,[In, Optional] const D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc,[Out, Fast] ID3D11ShaderResourceView** ppSRView)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateShaderResourceView</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.GetRenderTargetView(SharpDX.Toolkit.Graphics.PixelFormat,System.Int32)">
            <summary>
            Gets a <see cref="T:SharpDX.Direct3D11.RenderTargetView"/> for a particular <see cref="T:SharpDX.Toolkit.Graphics.PixelFormat"/>.
            </summary>
            <param name="pixelFormat">The view format.</param>
            <param name="width">The width in pixels of the render target.</param>
            <returns>A <see cref="T:SharpDX.Direct3D11.RenderTargetView"/> for the particular view format.</returns>
            <remarks>The buffer must have been declared with <see cref="F:SharpDX.Toolkit.Graphics.BufferFlags.RenderTarget"/>.
            The RenderTargetView instance is kept by this buffer and will be disposed when this buffer is disposed.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.GetData``1">
            <summary>
            Gets the content of this buffer to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.GetData``1(``0[])">
            <summary>
            Copies the content of this buffer to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="toData">The destination buffer to receive a copy of the texture datas.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.GetData``1(``0@)">
            <summary>
            Copies the content of this buffer to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="toData">The destination buffer to receive a copy of the texture datas.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.GetData``1(SharpDX.Toolkit.Graphics.Buffer,``0@)">
            <summary>
            Copies the content of this buffer from GPU memory to an array of data on CPU memory using a specific staging resource.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="stagingTexture">The staging buffer used to transfer the buffer.</param>
            <param name="toData">To data.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </remarks>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.GetData``1(SharpDX.Toolkit.Graphics.Buffer,``0[])">
            <summary>
            Copies the content of this buffer from GPU memory to an array of data on CPU memory using a specific staging resource.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="stagingTexture">The staging buffer used to transfer the buffer.</param>
            <param name="toData">To data.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </remarks>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.GetData(SharpDX.Toolkit.Graphics.Buffer,SharpDX.DataPointer)">
            <summary>
            Copies the content of this buffer from GPU memory to a CPU memory using a specific staging resource.
            </summary>
            <param name="stagingTexture">The staging buffer used to transfer the buffer.</param>
            <param name="toData">To data pointer.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </remarks>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.SetData``1(``0@,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content of a single structure data from CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <msdn-id>ff476457</msdn-id>
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.SetData``1(``0[],System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content an array of data from CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <msdn-id>ff476457</msdn-id>
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.SetData(SharpDX.DataPointer,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <param name="fromData">A data pointer.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <msdn-id>ff476457</msdn-id>
              <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
              <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.SetData``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0@,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <msdn-id>ff476457</msdn-id>
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.SetData``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <msdn-id>ff476457</msdn-id>
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.SetData(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">A data pointer.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <msdn-id>ff476457</msdn-id>
              <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
              <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.SetDynamicData(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Action{System.IntPtr},System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Directly sets a CPU memory region.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">A data pointer.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <msdn-id>ff476457</msdn-id>
              <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
              <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.Buffer,SharpDX.DXGI.Format)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="buffer">The original buffer to duplicate the definition from.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.BufferDescription,SharpDX.DXGI.Format)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description of the buffer.</param>
            <param name="viewFormat">View format used if the buffer is used as a shared resource view.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="elementCount">Number of T elment in this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.DXGI.Format,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="elementSize">Size of an element in the buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.DXGI.Format,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="elementSize">Size of an element in the buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0@,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="value">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0@,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.DXGI.Format,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="value">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="initialValue">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.DXGI.Format,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="initialValue">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Byte[],System.Int32,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.DXGI.Format,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance from a byte array.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="initialValue">The initial value of this buffer.</param>
            <param name="elementSize">Size of an element. Must be equal to 2 or 4 for an index buffer, or to the size of a struct for a structured/typed buffer. Can be set to 0 for other buffers.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,System.Int32,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,System.Int32,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.DXGI.Format,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SharpDX.Toolkit.Graphics.Buffer"/></returns>
            <msdn-id>ff476501</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Buffer** ppBuffer)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Initialize(SharpDX.Direct3D11.DeviceChild)">
            <summary>
            Initializes the specified device arg.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.InitializeViews">
            <summary>
            Initializes the views.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.op_Implicit(SharpDX.Toolkit.Graphics.Buffer)~SharpDX.Direct3D11.Resource">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Resource"/>
            </summary>
            <param name="from">The GraphicsResource to convert from.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.op_Implicit(SharpDX.Toolkit.Graphics.Buffer)~SharpDX.Direct3D11.Buffer">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Buffer"/>
            </summary>
            <param name="from">From.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.op_Implicit(SharpDX.Toolkit.Graphics.Buffer)~SharpDX.Direct3D11.ShaderResourceView">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Buffer"/>
            </summary>
            <param name="from">From.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.op_Implicit(SharpDX.Toolkit.Graphics.Buffer)~SharpDX.Direct3D11.UnorderedAccessView">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Buffer"/>
            </summary>
            <param name="from">From.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Buffer.Constant">
            <summary>
            Constant buffer helper methods.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Constant.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new constant buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Dynamic"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Constant.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Creates a new constant buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Dynamic"/> usage.
            </summary>
            <typeparam name="T">Type of the constant buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Constant.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0@,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new constant buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Dynamic"/> usage.
            </summary>
            <typeparam name="T">Type of the constant buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the constant buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Constant.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new constant buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Dynamic"/> usage.
            </summary>
            <typeparam name="T">Type of the constant buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the constant buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Constant.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new constant buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Dynamic"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the constant buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Buffer.Index">
            <summary>
            Index buffer helper methods.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Index.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage by default.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Index.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage by default.
            </summary>
            <typeparam name="T">Type of the index buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="indexCount">Number of indices.</param>
            <param name="usage">The usage.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Index.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0@,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> usage by default.
            </summary>
            <typeparam name="T">Type of the index buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Index.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> usage by default.
            </summary>
            <typeparam name="T">Type of the index buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Index.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Byte[],System.Boolean,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> usage by default.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="is32BitIndex">Set to true if the buffer is using a 32 bit index or false for 16 bit index.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Index.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> usage by default.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Buffer.Vertex">
            <summary>
            Vertex buffer helper methods.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Vertex.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage by default.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Vertex.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="vertexBufferCount">Number of vertex in this buffer with the sizeof(T).</param>
            <param name="usage">The usage.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Vertex.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> usage by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Vertex buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Vertex.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> usage by default.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Vertex buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SharpDX.Toolkit.Graphics.Buffer.Structured" -->
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Structured.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new Structured buffer accessible as a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> and optionaly as a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="elementSize">Size of the struct.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Structured.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Boolean)">
            <summary>
            Creates a new Structured buffer accessible as a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> and optionaly as a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
            <typeparam name="T">Type of the element in the structured buffer</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Structured.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],System.Boolean)">
            <summary>
            Creates a new Structured buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the Structured buffer to get the sizeof from</typeparam>
            <param name="value">The value to initialize the Structured buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Structured.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,System.Int32,System.Boolean)">
            <summary>
            Creates a new Structured buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Structured buffer.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SharpDX.Toolkit.Graphics.Buffer.StructuredAppend" -->
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.StructuredAppend.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Creates a new StructuredAppend buffer accessible as a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> and as a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="elementSize">Size of the struct.</param>
            <returns>A StructuredAppend buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.StructuredAppend.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new StructuredAppend buffer accessible as a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> and optionaly as a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the element in the structured buffer</typeparam>
            <param name="count">The number of element in this buffer.</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.StructuredAppend.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[])">
            <summary>
            Creates a new StructuredAppend buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the StructuredAppend buffer to get the sizeof from</typeparam>
            <param name="value">The value to initialize the StructuredAppend buffer.</param>
            <returns>A StructuredAppend buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.StructuredAppend.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,System.Int32)">
            <summary>
            Creates a new StructuredAppend buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the StructuredAppend buffer.</param>
            <param name="elementSize">Size of the element.</param>
            <returns>A StructuredAppend buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SharpDX.Toolkit.Graphics.Buffer.StructuredCounter" -->
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.StructuredCounter.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Creates a new StructuredCounter buffer accessible as a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> and as a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="elementSize">Size of the struct.</param>
            <returns>A StructuredCounter buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.StructuredCounter.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new StructuredCounter buffer accessible as a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> and optionaly as a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
            <typeparam name="T">Type of the element in the structured buffer</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.StructuredCounter.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[])">
            <summary>
            Creates a new StructuredCounter buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <typeparam name="T">Type of the StructuredCounter buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the StructuredCounter buffer.</param>
            <returns>A StructuredCounter buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.StructuredCounter.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,System.Int32)">
            <summary>
            Creates a new StructuredCounter buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the StructuredCounter buffer.</param>
            <param name="elementSize">Size of the element.</param>
            <returns>A StructuredCounter buffer</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Buffer.Raw">
            <summary>
            Raw buffer helper methods.
            </summary>
            <remarks>
            Example in HLSL: ByteAddressBuffer or RWByteAddressBuffer for raw buffers supporting unordered access.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Raw.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Raw buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Raw.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Raw buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <typeparam name="T">Type of the Raw buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Raw.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0@,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Raw buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <typeparam name="T">Type of the Raw buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Raw buffer.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Raw.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Raw buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <typeparam name="T">Type of the Raw buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Raw buffer.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Raw.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,SharpDX.Toolkit.Graphics.BufferFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Raw buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Raw buffer.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Buffer.Argument">
            <summary>
            Argument buffer helper methods.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Argument.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Argument buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <returns>A Argument buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Argument.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Argument buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <typeparam name="T">Type of the Argument buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="usage">The usage.</param>
            <returns>A Argument buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Argument.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0@,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Argument buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <typeparam name="T">Type of the Argument buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Argument buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Argument buffer</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Buffer.Typed">
            <summary>
            Typed buffer helper methods.
            </summary>
            <remarks>
            Example in HLSL: Buffer&lt;float4&gt;.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Typed.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,System.Boolean,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Typed buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of data with the following viewFormat.</param>
            <param name="viewFormat">The view format of the buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <param name="usage">The usage.</param>
            <returns>A Typed buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Typed.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],SharpDX.Toolkit.Graphics.PixelFormat,System.Boolean,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Typed buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <typeparam name="T">Type of the Typed buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Typed buffer.</param>
            <param name="viewFormat">The view format of the buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Typed buffer</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer.Typed.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,SharpDX.Toolkit.Graphics.PixelFormat,System.Boolean,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new Typed buffer <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> usage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Typed buffer.</param>
            <param name="viewFormat">The view format of the buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Typed buffer</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Buffer`1">
            <summary>
            A buffer with typed information.
            </summary>
            <typeparam name="T">Type of an element of this buffer.</typeparam>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer`1.GetData">
            <summary>
            Gets the content of this texture to an array of data.
            </summary>
            <returns>An array of data.</returns>
            <msdn-id>ff476457</msdn-id>
              <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
              <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
            <remarks>This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer`1.SetData(`0@,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content of a single structure data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <msdn-id>ff476457</msdn-id>
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer`1.SetData(`0[],System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content an array of data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <msdn-id>ff476457</msdn-id>
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer`1.SetData(SharpDX.Toolkit.Graphics.GraphicsDevice,`0@,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content of a single structure data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <msdn-id>ff476457</msdn-id>
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Buffer`1.SetData(SharpDX.Toolkit.Graphics.GraphicsDevice,`0[],System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.SetDataOptions)">
            <summary>
            Copies the content an array of data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <msdn-id>ff476457</msdn-id>
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.BufferFlags">
            <summary>
            Flags of a buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.None">
            <summary>
            Creates a none buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.BindFlags.None"/>.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.ConstantBuffer">
            <summary>
            Creates a constant buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.BindFlags.ConstantBuffer"/>.
            </remarks>
            <msdn-id>ff476085</msdn-id>	
            <unmanaged>D3D11_BIND_CONSTANT_BUFFER</unmanaged>	
            <unmanaged-short>D3D11_BIND_CONSTANT_BUFFER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.IndexBuffer">
            <summary>
            Creates an index buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.BindFlags.IndexBuffer"/>.
            </remarks>
            <msdn-id>ff476085</msdn-id>	
            <unmanaged>D3D11_BIND_INDEX_BUFFER</unmanaged>	
            <unmanaged-short>D3D11_BIND_INDEX_BUFFER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.VertexBuffer">
            <summary>
            Creates a vertex buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.BindFlags.VertexBuffer"/>.
            </remarks>
            <msdn-id>ff476085</msdn-id>	
            <unmanaged>D3D11_BIND_VERTEX_BUFFER</unmanaged>	
            <unmanaged-short>D3D11_BIND_VERTEX_BUFFER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.RenderTarget">
            <summary>
            Creates a render target buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/>.
            </remarks>
            <msdn-id>ff476085</msdn-id>	
            <unmanaged>D3D11_BIND_RENDER_TARGET</unmanaged>	
            <unmanaged-short>D3D11_BIND_RENDER_TARGET</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.ShaderResource">
            <summary>
            Creates a buffer usable as a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.BindFlags.ShaderResource"/>.
            </remarks>
            <msdn-id>ff476085</msdn-id>	
            <unmanaged>D3D11_BIND_SHADER_RESOURCE</unmanaged>	
            <unmanaged-short>D3D11_BIND_SHADER_RESOURCE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.UnorderedAccess">
            <summary>
            Creates an unordered access buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.BindFlags.UnorderedAccess"/>.
            </remarks>
            <msdn-id>ff476085</msdn-id>	
            <unmanaged>D3D11_BIND_UNORDERED_ACCESS</unmanaged>	
            <unmanaged-short>D3D11_BIND_UNORDERED_ACCESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.StructuredBuffer">
            <summary>
            Creates a structured buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.BufferStructured"/>.
            </remarks>
            <msdn-id>ff476203</msdn-id>	
            <unmanaged>D3D11_RESOURCE_MISC_BUFFER_STRUCTURED</unmanaged>	
            <unmanaged-short>D3D11_RESOURCE_MISC_BUFFER_STRUCTURED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.StructuredAppendBuffer">
            <summary>
            Creates a structured buffer that supports unordered acccess and append.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.BufferStructured"/>.
            </remarks>
            <msdn-id>ff476203</msdn-id>	
            <unmanaged>D3D11_RESOURCE_MISC_BUFFER_STRUCTURED</unmanaged>	
            <unmanaged-short>D3D11_RESOURCE_MISC_BUFFER_STRUCTURED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.StructuredCounterBuffer">
            <summary>
            Creates a structured buffer that supports unordered acccess and counter.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.BufferStructured"/>.
            </remarks>
            <msdn-id>ff476203</msdn-id>	
            <unmanaged>D3D11_RESOURCE_MISC_BUFFER_STRUCTURED</unmanaged>	
            <unmanaged-short>D3D11_RESOURCE_MISC_BUFFER_STRUCTURED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.RawBuffer">
            <summary>
            Creates a raw buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.BufferAllowRawViews"/> and <see cref="F:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags.Raw"/>.
            </remarks>
            <msdn-id>ff476203</msdn-id>	
            <unmanaged>D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS</unmanaged>	
            <unmanaged-short>D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.BufferFlags.ArgumentBuffer">
            <summary>
            Creates an indirect arguments buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="!:ResourceOptionFlags.DrawindirectArgs"/>.
            </remarks>
            <msdn-id>ff476203</msdn-id>	
            <unmanaged>D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS</unmanaged>	
            <unmanaged-short>D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS</unmanaged-short>	
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectConstantBufferCollection">
            <summary>
            A collection of <see cref="T:SharpDX.Toolkit.Graphics.EffectConstantBuffer"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectConstantBufferCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectConstantBufferCollection"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectConstantBufferCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectConstantBufferCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.AttributeCollection">
            <summary>
            A collection of attributes.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.AttributeCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AttributeCollection.Item(System.String)">
            <summary>
            Gets a specific element in the collection by using a name.
            </summary>
            <param name="name">The name.</param>
            <returns>The value of the attribute. Null if not found.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AttributeCollection.Count">
            <summary>
            Gets the number of attributes.
            </summary>
            <value>The count of attributes.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AttributeCollection.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AttributeCollection.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectConstantBuffer">
            <summary>
            A constant buffer exposed by an effect.
            </summary>
            <remarks>
            Constant buffers are created and shared inside a same <see cref="T:SharpDX.Toolkit.Graphics.EffectPool"/>. The creation of the underlying GPU buffer
            can be overriden using <see cref="P:SharpDX.Toolkit.Graphics.EffectPool.ConstantBufferAllocator"/>.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectConstantBuffer.IsDirty">
            <summary>
            Set this flag to true to notify that the buffer was changed
            </summary>
            <remarks>
            When using Set(value) methods on this buffer, this property must be set to true to ensure that the bufer will
            be uploaded.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectConstantBuffer.Parameters">
            <summary>
            Gets the parameters registered for this constant buffer.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectConstantBuffer.Update">
            <summary>
            Updates the specified constant buffer from all parameters value.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectConstantBuffer.Update(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Updates the specified constant buffer from all parameters value.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectPool">
            <summary>
            This class manages a pool of <see cref="T:SharpDX.Toolkit.Graphics.Effect"/>.
            </summary>
            <remarks>
            This class is responsible to store all EffectData, create shareable constant buffers betwen effects and reuse shader EffectData instances.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPool.RegisterBytecode(SharpDX.Toolkit.Graphics.EffectData[])">
            <summary>
            Registers a EffectData to this pool.
            </summary>
            <param name="datas">The datas to register.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPool.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.EffectData[])">
            <summary>
            Creates a new effect pool from a specified list of <see cref="P:SharpDX.Toolkit.Graphics.EffectPool.EffectData"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="datas">The datas.</param>
            <returns>An instance of <see cref="T:SharpDX.Toolkit.Graphics.EffectPool"/>.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPool.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Toolkit.Graphics.EffectData[])">
            <summary>
            Creates a new named effect pool from a specified list of <see cref="P:SharpDX.Toolkit.Graphics.EffectPool.EffectData"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name of this effect pool.</param>
            <param name="datas">The datas.</param>
            <returns>An instance of <see cref="T:SharpDX.Toolkit.Graphics.EffectPool"/>.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectPool.ConstantBufferAllocator">
            <summary>
              Gets or sets the constant buffer allocator used to allocate a GPU constant buffer declared in an Effect.
            </summary>
            <remarks>
              This delegate must be overriden when you want to control the creation of the GPU Constant buffer.
              By default, the allocator is just allocating the buffer using "Buffer.Constant.New(size)" but
              It is sometimes needed to create a constant buffer with different usage scenarios (using for example
              a RawBuffer with multiple usages).
              Setting this property to null will revert the default allocator.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectPool.EffectData">
            <summary>
            Gets the current merged EffectData for this pool. See remarks.
            </summary>
            <value>The EffectData.</value>
            <remarks>
            This EffectData must not be modified at runtime.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectParameter">
            <summary>
            A parameter of an effect.
            </summary>
            <remarks>
            A parameter can be a value type that will be set to a constant buffer, or a resource type (SRV, UAV, SamplerState).
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.#ctor(SharpDX.Toolkit.Graphics.EffectData.ValueTypeParameter,SharpDX.Toolkit.Graphics.EffectConstantBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectParameter"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.#ctor(SharpDX.Toolkit.Graphics.EffectData.ResourceParameter,SharpDX.Toolkit.Graphics.EffectResourceType,System.Int32,SharpDX.Toolkit.Graphics.EffectResourceLinker)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectParameter"/> class.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectParameter.ParameterClass">
            <summary>
            Gets the parameter class.
            </summary>
            <value>The parameter class.</value>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectParameter.ResourceType">
            <summary>
            Gets the resource type.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectParameter.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
            <value>The type of the parameter.</value>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectParameter.IsValueType">
            <summary>
            Gets a boolean indicating if this parameter is a value type (true) or a resource type (false).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectParameter.RowCount">
            <summary>	
            Number of rows in a matrix. Otherwise a numeric type returns 1, any other type returns 0. 	
            </summary>	
            <unmanaged>int Rows</unmanaged>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectParameter.ColumnCount">
            <summary>	
            Number of columns in a matrix. Otherwise a numeric type returns 1, any other type returns 0. 	
            </summary>	
            <unmanaged>int Columns</unmanaged>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectParameter.ElementCount">
            <summary>
            Gets the collection of effect parameters.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectParameter.Size">
            <summary>
            Size in bytes of the element, only valid for value types.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.GetValue``1">
            <summary>
            Gets a single value to the associated parameter in the constant buffer.
            </summary>
            <typeparam name="T">The type of the value to read from the buffer.</typeparam>
            <returns>The value of this parameter.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.GetValueArray``1(System.Int32)">
            <summary>
            Gets an array of values to the associated parameter in the constant buffer.
            </summary>
            <typeparam name = "T">The type of the value to read from the buffer.</typeparam>
            <returns>The value of this parameter.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.GetMatrix">
            <summary>
            Gets a single value to the associated parameter in the constant buffer.
            </summary>
            <returns>The value of this parameter.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.GetMatrix(System.Int32)">
            <summary>
            Gets a single value to the associated parameter in the constant buffer.
            </summary>
            <returns>The value of this parameter.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.GetMatrixArray(System.Int32)">
            <summary>
            Gets an array of matrices to the associated parameter in the constant buffer.
            </summary>
            <param name="count">The count.</param>
            <returns>Matrix[][].</returns>
            <returns>The value of this parameter.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.GetMatrixArray(System.Int32,System.Int32)">
            <summary>
            Gets a single value to the associated parameter in the constant buffer.
            </summary>
            <typeparam name = "T">The type of the value to read from the buffer.</typeparam>
            <returns>The value of this parameter.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue``1(``0@)">
            <summary>
            Sets a single value to the associated parameter in the constant buffer.
            </summary>
            <typeparam name = "T">The type of the value to be written to the buffer.</typeparam>
            <param name = "value">The value to write to the buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue``1(``0)">
            <summary>
            Sets a single value to the associated parameter in the constant buffer.
            </summary>
            <typeparam name = "T">The type of the value to be written to the buffer.</typeparam>
            <param name = "value">The value to write to the buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue(SharpDX.Matrix@)">
            <summary>
            Sets a single matrix value to the associated parameter in the constant buffer.
            </summary>
            <param name = "value">The matrix to write to the buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue(SharpDX.Matrix)">
            <summary>
            Sets a single matrix value to the associated parameter in the constant buffer.
            </summary>
            <param name = "value">The matrix to write to the buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue(SharpDX.Matrix[])">
            <summary>
            Sets an array of matrices to the associated parameter in the constant buffer.
            </summary>
            <param name = "values">An array of matrices to be written to the current buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue(System.Int32,SharpDX.Matrix)">
            <summary>
            Sets a single matrix at the specified index for the associated parameter in the constant buffer.
            </summary>
            <param name="index">Index of the matrix to write in element count.</param>
            <param name = "value">The matrix to write to the buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue(System.Int32,SharpDX.Matrix[])">
            <summary>
            Sets an array of matrices to at the specified index for the associated parameter in the constant buffer.
            </summary>
            <param name="index">Index of the matrix to write in element count.</param>
            <param name = "values">An array of matrices to be written to the current buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue``1(``0[])">
            <summary>
            Sets an array of values to the associated parameter in the constant buffer.
            </summary>
            <typeparam name = "T">The type of the value to be written to the buffer.</typeparam>
            <param name = "values">An array of values to be written to the current buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue``1(System.Int32,``0@)">
            <summary>
            Sets a single value at the specified index for the associated parameter in the constant buffer.
            </summary>
            <typeparam name = "T">The type of the value to be written to the buffer.</typeparam>
            <param name="index">Index of the value to write in typeof(T) element count.</param>
            <param name = "value">The value to write to the buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue``1(System.Int32,``0)">
            <summary>
            Sets a single value at the specified index for the associated parameter in the constant buffer.
            </summary>
            <typeparam name = "T">The type of the value to be written to the buffer.</typeparam>
            <param name="index">Index of the value to write in typeof(T) element count.</param>
            <param name = "value">The value to write to the buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetValue``1(System.Int32,``0[])">
            <summary>
            Sets an array of values to at the specified index for the associated parameter in the constant buffer.
            </summary>
            <typeparam name = "T">The type of the value to be written to the buffer.</typeparam>
            <param name="index">Index of the value to write in typeof(T) element count.</param>
            <param name = "values">An array of values to be written to the current buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.SetResourcePointer(System.IntPtr)">
            <summary>
            Direct access to the resource pointer in order to 
            </summary>
            <param name="resourcePointer"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.CopyMatrixRowMajor(SharpDX.Matrix@,System.Int32)">
            <summary>
            Copy matrix in row major order.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="offset">The offset in bytes to write to</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.CopyMatrixColumnMajor(SharpDX.Matrix@,System.Int32)">
            <summary>
            Copy matrix in column major order.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="offset">The offset in bytes to write to</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.CopyMatrixDirect(SharpDX.Matrix@,System.Int32)">
            <summary>
            Straight Matrix copy, no conversion.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="offset">The offset in bytes to write to</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.GetMatrixRowMajorFrom(System.Int32)">
            <summary>
            Copy matrix in row major order.
            </summary>
            <param name="offset">The offset in bytes to write to</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.GetMatrixColumnMajorFrom(System.Int32)">
            <summary>
            Copy matrix in column major order.
            </summary>
            <param name="offset">The offset in bytes to write to</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameter.GetMatrixDirectFrom(System.Int32)">
            <summary>
            Straight Matrix copy, no conversion.
            </summary>
            <param name="offset">The offset in bytes to write to</param>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectParameter.Index">
            <summary>
            A unique index of this parameter instance inside the <see cref="T:SharpDX.Toolkit.Graphics.EffectParameterCollection"/> of an effect. See remarks.
            </summary>
            <remarks>
            This unique index can be used between different instance of the effect with different deferred <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectParameter.Offset">
            <summary>
            Offset of this parameter.
            </summary>
            <remarks>
            For a value type, this offset is the offset in bytes inside the constant buffer.
            For a resource type, this offset is an index to the resource linker.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectParameter.CopyMatrixDelegate">
            <summary>
            CopyMatrix delegate used to reorder matrix when copying from <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="offset">The offset in bytes to write to</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectParameter.GetMatrixDelegate">
            <summary>
            CopyMatrix delegate used to reorder matrix when copying from <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="offset">The offset in bytes to write to</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectParameterCollection">
            <summary>
            A collection of <see cref="T:SharpDX.Toolkit.Graphics.EffectParameter"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectParameterCollection"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectParameterCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectParameterCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectPass">
            <summary>
            Contains rendering state for drawing with an effect; an effect can contain one or more passes. 
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectPass.UnchangedUAVCounters">
            <summary>
              Declared 128 UAV counters for SetUnordere
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectPass.Attributes">
            <summary>
              Gets the attributes associated with this pass.
            </summary>
            <value> The attributes. </value>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectPass.Effect">
            <summary>
            The parent effect of this pass.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPass.#ctor(SharpDX.Toolkit.Diagnostics.Logger,SharpDX.Toolkit.Graphics.Effect,SharpDX.Toolkit.Graphics.EffectTechnique,SharpDX.Toolkit.Graphics.EffectData.Pass,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectPass"/> class.
            </summary>
            <param name="logger">The logger used to log errors.</param>
            <param name="effect"> The effect. </param>
            <param name="pass"> The pass. </param>
            <param name="name"> The name. </param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectPass.SubPasses">
            <summary>
            Gets the sub-pass attached to a global pass.
            </summary>
            <remarks>
            As a subpass cannot have subpass, if this pass is already a subpass, this field is null.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectPass.IsSubPass">
            <summary>
            Gets a boolean indicating if this pass is a subpass.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPass.Apply">
            <summary>
              Applies this pass to the device pipeline.
            </summary>
            <remarks>
              This method is responsible to:
              <ul>
                <li>Setup the shader on each stage.</li>
                <li>Upload constant buffers with dirty flag</li>
                <li>Set all input constant buffers, shader resource view, unordered access views and sampler states to the stage.</li>
              </ul>
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPass.ApplyInternal">
            <summary>
            Internal apply.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPass.Initialize(SharpDX.Toolkit.Diagnostics.Logger)">
            <summary>
            Initializes this pass.
            </summary>
            <param name="logger">The logger.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPass.InitStageBlock(SharpDX.Toolkit.Graphics.EffectPass.StageBlock,SharpDX.Toolkit.Diagnostics.Logger)">
            <summary>
            Initializes the stage block.
            </summary>
            <param name="stageBlock">The stage block.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPass.PrepareSlotLinks(SharpDX.Toolkit.Graphics.EffectPass.StageBlock@)">
            <summary>
            Optimizes the slot links.
            </summary>
            <param name="stageBlock">The stage block.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPass.ComputeSlotLinks">
            <summary>
            Computes the slot links.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectPass.BlendState">
            <summary>
              Gets or sets the state of the blend.
            </summary>
            <value> The state of the blend. </value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectPass.BlendStateColor">
            <summary>
              Gets or sets the color of the blend state.
            </summary>
            <value> The color of the blend state. </value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectPass.BlendStateSampleMask">
            <summary>
              Gets or sets the blend state sample mask.
            </summary>
            <value> The blend state sample mask. </value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectPass.DepthStencilState">
            <summary>
              Gets or sets the state of the depth stencil.
            </summary>
            <value> The state of the depth stencil. </value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectPass.DepthStencilReference">
            <summary>
              Gets or sets the depth stencil reference.
            </summary>
            <value> The depth stencil reference. </value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectPass.RasterizerState">
            <summary>
              Gets or sets the state of the rasterizer.
            </summary>
            <value> The state of the rasterizer. </value>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectPass.RawSlotLinkSet.Count">
            <summary>
              Number of SlotLinks.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectPass.RawSlotLinkSet.Links">
            <summary>
              SlotLink* ptr;
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectPassCollection">
            <summary>
            A collection of <see cref="T:SharpDX.Toolkit.Graphics.EffectPass"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPassCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectPassCollection"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectPassCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectPassCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectResourceLinker">
            <summary>
            A class used to shader input resource parameters and prepare them (i.e. take their NativePointer asap).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectResourceLinker.resources">
            <summary>
            Real object resources, as they were set on the parameter.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectResourceLinker.ConstantBuffers">
            <summary>
            Real object resources, as they were set on the parameter.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectResourceLinker.Count">
            <summary>
            Total number of resources.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectResourceLinker.Pointers">
            <summary>
            Pointer to native pointers.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectResourceLinker.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectResourceType">
            <summary>
            Type of a resource for an <see cref="T:SharpDX.Toolkit.Graphics.EffectParameter"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectResourceType.None">
            <summary>
            This is not a resource.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectResourceType.ConstantBuffer">
            <summary>
            A Constant Buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectResourceType.ShaderResourceView">
            <summary>
            A <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectResourceType.SamplerState">
            <summary>
            A <see cref="T:SharpDX.Direct3D11.SamplerState"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.EffectResourceType.UnorderedAccessView">
            <summary>
            An <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectResourceTypeHelper">
            <summary>
            Parameter type to resource type converter.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectResourceTypeHelper.ConvertFromParameterType(SharpDX.Toolkit.Graphics.EffectParameterType)">
            <summary>
            Converts a <see cref="T:SharpDX.Toolkit.Graphics.EffectParameterType"/> to an <see cref="T:SharpDX.Toolkit.Graphics.EffectResourceType"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>A resource type.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectTechnique">
            <summary>
            Represents an effect technique. 
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EffectTechnique.Passes">
            <summary>
            Gets the collection of EffectPass objects this rendering technique requires.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectTechniqueCollection">
            <summary>
            A collection of <see cref="T:SharpDX.Toolkit.Graphics.EffectTechnique"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectTechniqueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectTechniqueCollection"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectTechniqueCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.EffectTechniqueCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.MipMapDescription">
            <summary>
            Describes a mipmap.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapDescription.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.MipMapDescription"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="rowStride">The row stride.</param>
            <param name="depthStride">The depth stride.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.Width">
            <summary>
            Width of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.Height">
            <summary>
            Height of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.WidthPacked">
            <summary>
            Width of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.HeightPacked">
            <summary>
            Height of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.Depth">
            <summary>
            Depth of this mipmap.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.RowStride">
            <summary>
            RowStride of this mipmap (number of bytes per row).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.DepthStride">
            <summary>
            DepthStride of this mipmap (number of bytes per depth slice).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapDescription.MipmapSize">
            <summary>
            Size in bytes of this whole mipmap.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapDescription.op_Equality(SharpDX.Toolkit.Graphics.MipMapDescription,SharpDX.Toolkit.Graphics.MipMapDescription)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapDescription.op_Inequality(SharpDX.Toolkit.Graphics.MipMapDescription,SharpDX.Toolkit.Graphics.MipMapDescription)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelBufferArray">
            <summary>
            Used by <see cref="T:SharpDX.Toolkit.Graphics.Image"/> to provide a selector to a <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBufferArray.Item(System.Int32)">
            <summary>
            Gets the pixel buffer.
            </summary>
            <returns>A <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer"/>.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBufferArray.Count">
            <summary>
            Gets the total number of pixel buffers.
            </summary>
            <returns>The total number of pixel buffers.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBufferArray.Item(System.Int32,System.Int32)">
            <summary>
            Gets the pixel buffer for the specified array/z slice and mipmap level.
            </summary>
            <param name="arrayOrDepthSlice">For 3D image, the parameter is the Z slice, otherwise it is an index into the texture array.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>A <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer"/>.</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBufferArray.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the pixel buffer for the specified array/z slice and mipmap level.
            </summary>
            <param name="arrayIndex">Index into the texture array. Must be set to 0 for 3D images.</param>
            <param name="zIndex">Z index for 3D image. Must be set to 0 for all 1D/2D images.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>A <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer"/>.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ImageDescription">
            <summary>
            A description for <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Dimension">
            <summary>
            The dimension of a texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Width">
            <summary>	
            <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is valid for all textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Height">
            <summary>	
            <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476254</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Depth">
            <summary>	
            <dd> <p>Texture depth (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </remarks>
            <msdn-id>ff476254</msdn-id>	
            <unmanaged>unsigned int Depth</unmanaged>	
            <unmanaged-short>unsigned int Depth</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.ArraySize">
            <summary>	
            <dd> <p>Number of textures in the array. The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DArraySize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>
            </remarks>
            <remarks>
            This field is only valid for textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int ArraySize</unmanaged>	
            <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.MipLevels">
            <summary>	
            <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int MipLevels</unmanaged>	
            <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageDescription.Format">
            <summary>	
            <dd> <p>Texture format (see <strong><see cref="T:SharpDX.DXGI.Format"/></strong>).</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DDS.MagicHeader">
            <summary>
            Magic code to identify DDS header
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.PixelFormat">
            <summary>
            Internal structure used to describe a DDS pixel format.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDS.PixelFormat.#ctor(SharpDX.Toolkit.Graphics.DDS.PixelFormatFlags,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.DDS.PixelFormat"/> struct.
            </summary>
            <param name="flags">The flags.</param>
            <param name="fourCC">The four CC.</param>
            <param name="rgbBitCount">The RGB bit count.</param>
            <param name="rBitMask">The r bit mask.</param>
            <param name="gBitMask">The g bit mask.</param>
            <param name="bBitMask">The b bit mask.</param>
            <param name="aBitMask">A bit mask.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.PixelFormatFlags">
            <summary>
            PixelFormat flags.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.HeaderFlags">
            <summary>
            DDS Header flags.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.SurfaceFlags">
            <summary>
            DDS Surface flags.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDS.CubemapFlags">
            <summary>
            DDS Cubemap flags.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DDSFlags">
            <summary>
            Flags used by <see cref="M:SharpDX.Toolkit.Graphics.DDSHelper.LoadFromDDSMemory(System.IntPtr,System.Int32,System.Boolean,System.Nullable{System.Runtime.InteropServices.GCHandle})"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.DecodeDDSHeader(System.IntPtr,System.Int32,SharpDX.Toolkit.Graphics.DDSFlags,SharpDX.Toolkit.Graphics.ImageDescription@,SharpDX.Toolkit.Graphics.DDSHelper.ConversionFlags@)">
            <summary>
            Decodes DDS header including optional DX10 extended header
            </summary>
            <param name="headerPtr">Pointer to the DDS header.</param>
            <param name="size">Size of the DDS content.</param>
            <param name="flags">Flags used for decoding the DDS header.</param>
            <param name="description">Output texture description.</param>
            <param name="convFlags">Output conversion flags.</param>
            <exception cref="T:System.ArgumentException">If the argument headerPtr is null</exception>
            <exception cref="T:System.InvalidOperationException">If the DDS header contains invalid datas.</exception>
            <returns>True if the decoding is successfull, false if this is not a DDS header.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.EncodeDDSHeader(SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.DDSFlags,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Encodes DDS file header (magic value, header, optional DX10 extended header)
            </summary>
            <param name="flags">Flags used for decoding the DDS header.</param>
            <param name="description">Output texture description.</param>
            <param name="pDestination">Pointer to the DDS output header. Can be set to IntPtr.Zero to calculated the required bytes.</param>
            <param name="maxsize">The maximum size of the destination buffer.</param>
            <param name="required">Output the number of bytes required to write the DDS header.</param>
            <exception cref="T:System.ArgumentException">If the argument headerPtr is null</exception>
            <exception cref="T:System.InvalidOperationException">If the DDS header contains invalid datas.</exception>
            <returns>True if the decoding is successfull, false if this is not a DDS header.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Toolkit.Graphics.DDSHelper.LegacyExpandScanline(System.IntPtr,System.Int32,SharpDX.DXGI.Format,System.IntPtr,System.Int32,SharpDX.Toolkit.Graphics.DDSHelper.TEXP_LEGACY_FORMAT,System.Int32*,SharpDX.Toolkit.Graphics.DDSHelper.ScanlineFlags)" -->
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.LoadFromDDSMemory(System.IntPtr,System.Int32,System.Boolean,System.Nullable{System.Runtime.InteropServices.GCHandle})">
            <summary>
            Load a DDS file in memory
            </summary>
            <param name="pSource"></param>
            <param name="size"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.CreateImageFromDDS(System.IntPtr,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.Image.PitchFlags,SharpDX.Toolkit.Graphics.DDSHelper.ConversionFlags,System.Int32*,System.Nullable{System.Runtime.InteropServices.GCHandle})">
            <summary>
            Converts or copies image data from pPixels into scratch image data
            </summary>
            <param name="pDDS"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="metadata"></param>
            <param name="cpFlags"></param>
            <param name="convFlags"></param>
            <param name="pal8"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.ExpandScanline(System.IntPtr,System.Int32,System.IntPtr,System.Int32,SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.DDSHelper.ScanlineFlags)">
            <summary>
            Converts an image row with optional clearing of alpha value to 1.0
            </summary>
            <param name="pDestination"></param>
            <param name="outSize"></param>
            <param name="pSource"></param>
            <param name="inSize"></param>
            <param name="inFormat"></param>
            <param name="flags"></param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.CopyScanline(System.IntPtr,System.Int32,System.IntPtr,System.Int32,SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.DDSHelper.ScanlineFlags)">
            <summary>
            Copies an image row with optional clearing of alpha value to 1.0.
            </summary>
            <remarks>
            This method can be used in place as well, otherwise copies the image row unmodified.
            </remarks>
            <param name="pDestination">The destination buffer.</param>
            <param name="outSize">The destination size.</param>
            <param name="pSource">The source buffer.</param>
            <param name="inSize">The source size.</param>
            <param name="format">The <see cref="T:SharpDX.DXGI.Format"/> of the source scanline.</param>
            <param name="flags">Scanline flags used when copying the scanline.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.SwizzleScanline(System.IntPtr,System.Int32,System.IntPtr,System.Int32,SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.DDSHelper.ScanlineFlags)">
            <summary>
            Swizzles (RGB &lt;-&gt; BGR) an image row with optional clearing of alpha value to 1.0.
            </summary>
            <param name="pDestination">The destination buffer.</param>
            <param name="outSize">The destination size.</param>
            <param name="pSource">The source buffer.</param>
            <param name="inSize">The source size.</param>
            <param name="format">The <see cref="T:SharpDX.DXGI.Format"/> of the source scanline.</param>
            <param name="flags">Scanline flags used when copying the scanline.</param>
            <remarks>
            This method can be used in place as well, otherwise copies the image row unmodified.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DDSHelper.LegacyMap.#ctor(SharpDX.DXGI.Format,SharpDX.Toolkit.Graphics.DDSHelper.ConversionFlags,SharpDX.Toolkit.Graphics.DDS.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.DDSHelper.LegacyMap"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="conversionFlags">The conversion flags.</param>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DisplayMode">
            <summary>
            Describes the display mode. This is equivalent to <see cref="T:SharpDX.DXGI.ModeDescription"/>
            </summary>
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_DESC</unmanaged>	
            <unmanaged-short>DXGI_MODE_DESC</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DisplayMode.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DisplayMode.AspectRatio">
            <summary>
            Gets the aspect ratio used by the graphics device.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DisplayMode.Format">
            <summary>
            Gets a value indicating the surface format of the display mode.
            </summary>
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DisplayMode.Width">
            <summary>
            Gets a value indicating the screen width, in pixels.
            </summary>
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DisplayMode.Height">
            <summary>
            Gets a value indicating the screen height, in pixels.
            </summary>
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DisplayMode.RefreshRate">
            <summary>
            Gets a value indicating the refresh rate
            </summary>
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
            <unmanaged-short>DXGI_RATIONAL RefreshRate</unmanaged-short>	
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsAdapter">
            <summary>
            Provides methods to retrieve and manipulate graphics adapters. This is the equivalent to <see cref="T:SharpDX.DXGI.Adapter1"/>.
            </summary>
            <msdn-id>ff471329</msdn-id>	
            <unmanaged>IDXGIAdapter1</unmanaged>	
            <unmanaged-short>IDXGIAdapter1</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsAdapter.DefaultFormat">
            <summary>
            Default PixelFormat used.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsAdapter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpDX.Toolkit.Graphics.GraphicsAdapter"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsAdapter.Initialize(SharpDX.DXGI.Factory1)">
            <summary>
            Initializes all adapters with the specified factory.
            </summary>
            <param name="factory1">The factory1.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsAdapter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.GraphicsAdapter"/> class.
            </summary>
            <param name="adapterOrdinal">The adapter ordinal.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsAdapter.ToString">
            <summary>
            Return the description of this adapter
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsAdapter.IsProfileSupported(SharpDX.Direct3D.FeatureLevel)">
            <summary>
            Tests to see if the adapter supports the requested profile.
            </summary>
            <param name="featureLevel">The graphics profile.</param>
            <returns>true if the profile is supported</returns>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsAdapter.Description">
            <summary>
            Gets the description for this adapter.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsAdapter.op_Implicit(SharpDX.Toolkit.Graphics.GraphicsAdapter)~SharpDX.DXGI.Adapter1">
            <summary>
            <see cref="T:SharpDX.DXGI.Adapter1"/> casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsAdapter.op_Implicit(SharpDX.Toolkit.Graphics.GraphicsAdapter)~SharpDX.DXGI.Factory1">
            <summary>
            <see cref="T:SharpDX.DXGI.Adapter1"/> casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsAdapter.DisposeStatic">
            <summary>
            Disposes of all objects
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsAdapter.GetSupportedDisplayModes">
            <summary>
            Returns a collection of supported display modes for a particular Format.
            </summary>
            <returns>a read-only collection of display modes</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsAdapter.Factory">
            <summary>
            Gets the <see cref="T:SharpDX.DXGI.Factory1"/> used by all GraphicsAdapter.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsAdapter.CurrentDisplayMode">
            <summary>
            Gets the current display mode.
            </summary>
            <value>The current display mode.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsAdapter.Adapters">
            <summary>
            Collection of available adapters on the system.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsAdapter.Default">
            <summary>
            Gets the default adapter.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsAdapter.SupportedDisplayModes">
            <summary>
            Returns a collection of supported display modes for the current adapter.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsAdapter.DesktopBounds">
            <summary>
            Retrieves bounds of the desktop coordinates.
            </summary>
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>RECT DesktopCoordinates</unmanaged>	
            <unmanaged-short>RECT DesktopCoordinates</unmanaged-short>	
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsAdapter.IsDefaultAdapter">
            <summary>
            Determines if this instance of GraphicsAdapter is the default adapter.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsAdapter.MonitorHandle">
            <summary>
            Retrieves the handle of the monitor associated with the Microsoft Direct3D object.
            </summary>
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>HMONITOR Monitor</unmanaged>	
            <unmanaged-short>HMONITOR Monitor</unmanaged-short>	
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Image">
            <summary>
            Provides method to instantiate an image 1D/2D/3D supporting TextureArray and mipmaps on the CPU or to load/save an image from the disk.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.OffsetBufferTKTX">
            <summary>
            Offset from the beginning of the buffer where pixel buffers are stored.
            This offset is used to keep data aligned on 16 bytes (if the original buffer is aligned on 16 bytes as well).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.pixelBuffers">
            <summary>
            Pixel buffers.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.pixelBufferArray">
            <summary>
            Provides access to all pixel buffers.
            </summary>
            <remarks>
            For Texture3D, each z slice of the Texture3D has a pixelBufferArray * by the number of mipmaps.
            For other textures, there is Description.MipLevels * Description.ArraySize pixel buffers.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.totalSizeInBytes">
            <summary>
            Gets the total number of bytes occupied by this image in memory.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.buffer">
            <summary>
            Pointer to the buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.bufferIsDisposable">
            <summary>
            True if the buffer must be disposed.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.handle">
            <summary>
            Handke != null if the buffer is a pinned managed object on the LOH (Large Object Heap).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Image.Description">
            <summary>
            Description of this image.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.#ctor(SharpDX.Toolkit.Graphics.ImageDescription,System.IntPtr,System.Int32,System.Nullable{System.Runtime.InteropServices.GCHandle},System.Boolean,SharpDX.Toolkit.Graphics.Image.PitchFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Image"/> class.
            </summary>
            <param name="description">The image description.</param>
            <param name="dataPointer">The pointer to the data buffer.</param>
            <param name="offset">The offset from the beginning of the data buffer.</param>
            <param name="handle">The handle (optionnal).</param>
            <param name="bufferIsDisposable">if set to <c>true</c> [buffer is disposable].</param>
            <exception cref="T:System.InvalidOperationException">If the format is invalid, or width/height/depth/arraysize is invalid with respect to the dimension.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.GetMipMapDescription(System.Int32)">
            <summary>
            Gets the mipmap description of this instance for the specified mipmap level.
            </summary>
            <param name="mipmap">The mipmap.</param>
            <returns>A description of a particular mipmap for this texture.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.GetPixelBuffer(System.Int32,System.Int32)">
            <summary>
            Gets the pixel buffer for the specified array/z slice and mipmap level.
            </summary>
            <param name="arrayOrZSliceIndex">For 3D image, the parameter is the Z slice, otherwise it is an index into the texture array.</param>
            <param name="mipmap">The mipmap.</param>
            <returns>A <see cref="F:SharpDX.Toolkit.Graphics.Image.pixelBufferArray"/>.</returns>
            <exception cref="T:System.ArgumentException">If arrayOrZSliceIndex or mipmap are out of range.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.GetPixelBuffer(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the pixel buffer for the specified array/z slice and mipmap level.
            </summary>
            <param name="arrayIndex">Index into the texture array. Must be set to 0 for 3D images.</param>
            <param name="zIndex">Z index for 3D image. Must be set to 0 for all 1D/2D images.</param>
            <param name="mipmap">The mipmap.</param>
            <returns>A <see cref="F:SharpDX.Toolkit.Graphics.Image.pixelBufferArray"/>.</returns>
            <exception cref="T:System.ArgumentException">If arrayIndex, zIndex or mipmap are out of range.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Register(SharpDX.Toolkit.Graphics.ImageFileType,SharpDX.Toolkit.Graphics.Image.ImageLoadDelegate,SharpDX.Toolkit.Graphics.Image.ImageSaveDelegate)">
            <summary>
            Registers a loader/saver for a specified image file type.
            </summary>
            <param name="type">The file type (use integer and explicit casting to <see cref="T:SharpDX.Toolkit.Graphics.ImageFileType"/> to register other fileformat.</param>
            <param name="loader">The loader delegate (can be null).</param>
            <param name="saver">The saver delegate (can be null).</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.ToDataBox">
            <summary>
            Gets the databox from this image.
            </summary>
            <returns>The databox of this image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.ComputeDataBox">
            <summary>
            Gets the databox from this image.
            </summary>
            <returns>The databox of this image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New(SharpDX.Toolkit.Graphics.ImageDescription)">
            <summary>
            Creates a new instance of <see cref="T:SharpDX.Toolkit.Graphics.Image"/> from an image description.
            </summary>
            <param name="description">The image description.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New1D(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32)">
            <summary>
            Creates a new instance of a 1D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="arraySize">Size of the array.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New2D(System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32)">
            <summary>
            Creates a new instance of a 2D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="arraySize">Size of the array.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.NewCube(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            Creates a new instance of a Cube <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New3D(System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            Creates a new instance of a 3D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New(SharpDX.Toolkit.Graphics.ImageDescription,System.IntPtr)">
            <summary>
            Creates a new instance of <see cref="T:SharpDX.Toolkit.Graphics.Image"/> from an image description.
            </summary>
            <param name="description">The image description.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New1D(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Creates a new instance of a 1D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="arraySize">Size of the array.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New2D(System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32,System.IntPtr)">
            <summary>
            Creates a new instance of a 2D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="arraySize">Size of the array.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.NewCube(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.IntPtr)">
            <summary>
            Creates a new instance of a Cube <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.New3D(System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,System.IntPtr)">
            <summary>
            Creates a new instance of a 3D <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipMapCount">The mip map count.</param>
            <param name="format">The format.</param>
            <param name="dataPointer">Pointer to an existing buffer.</param>
            <returns>A new image.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(SharpDX.DataPointer,System.Boolean)">
            <summary>
            Loads an image from an unmanaged memory pointer.
            </summary>
            <param name="dataBuffer">Pointer to an unmanaged memory. If <see cref="!:makeACopy"/> is false, this buffer must be allocated with <see cref="M:SharpDX.Utilities.AllocateMemory(System.Int32,System.Int32)"/>.</param>
            <param name="makeACopy">True to copy the content of the buffer to a new allocated buffer, false otherwhise.</param>
            <returns>An new image.</returns>
            <remarks>If <see cref="!:makeACopy"/> is set to false, the returned image is now the holder of the unmanaged pointer and will release it on Dispose. </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Loads an image from an unmanaged memory pointer.
            </summary>
            <param name="dataPointer">Pointer to an unmanaged memory. If <see cref="!:makeACopy"/> is false, this buffer must be allocated with <see cref="M:SharpDX.Utilities.AllocateMemory(System.Int32,System.Int32)"/>.</param>
            <param name="dataSize">Size of the unmanaged buffer.</param>
            <param name="makeACopy">True to copy the content of the buffer to a new allocated buffer, false otherwise.</param>
            <returns>An new image.</returns>
            <remarks>If <see cref="!:makeACopy"/> is set to false, the returned image is now the holder of the unmanaged pointer and will release it on Dispose. </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.Byte[])">
            <summary>
            Loads an image from a managed buffer.
            </summary>
            <param name="buffer">Reference to a managed buffer.</param>
            <returns>An new image.</returns>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.IO.Stream)">
            <summary>
            Loads the specified image from a stream.
            </summary>
            <param name="imageStream">The image stream.</param>
            <returns>An new image.</returns>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.String)">
            <summary>
            Loads the specified image from a file.
            </summary>
            <param name="fileName">The filename.</param>
            <returns>An new image.</returns>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Save(System.String,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this instance to a file.
            </summary>
            <param name="fileName">The destination file.</param>
            <param name="fileType">Specify the output format.</param>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Save(System.IO.Stream,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this instance to a stream.
            </summary>
            <param name="imageStream">The destination stream.</param>
            <param name="fileType">Specify the output format.</param>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Load(System.IntPtr,System.Int32,System.Boolean,System.Nullable{System.Runtime.InteropServices.GCHandle})">
            <summary>
            Loads an image from the specified pointer.
            </summary>
            <param name="dataPointer">The data pointer.</param>
            <param name="dataSize">Size of the data.</param>
            <param name="makeACopy">if set to <c>true</c> [make A copy].</param>
            <param name="handle">The handle.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.Save(SharpDX.Toolkit.Graphics.PixelBuffer[],System.Int32,SharpDX.Toolkit.Graphics.ImageDescription,System.IO.Stream,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this instance to a stream.
            </summary>
            <param name="pixelBuffers">The buffers to save.</param>
            <param name="count">The number of buffers to save.</param>
            <param name="description">Global description of the buffer.</param>
            <param name="imageStream">The destination stream.</param>
            <param name="fileType">Specify the output format.</param>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.LoadTKTX(System.IntPtr,System.Int32,System.Boolean,System.Nullable{System.Runtime.InteropServices.GCHandle})">
            <summary>
            Saves the specified pixel buffers in TKTX format.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.SaveTKTX(SharpDX.Toolkit.Graphics.PixelBuffer[],System.Int32,SharpDX.Toolkit.Graphics.ImageDescription,System.IO.Stream)">
            <summary>
            Saves the specified pixel buffers in TKTX format.
            </summary>
            <param name="pixelBuffers">The pixel buffers.</param>
            <param name="count">The count.</param>
            <param name="description">The description.</param>
            <param name="imageStream">The image stream.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.CalculateImageArray(SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.Image.PitchFlags,System.Int32@,System.Int32@)">
            <summary>
            Determines number of image array entries and pixel size.
            </summary>
            <param name="imageDesc">Description of the image to create.</param>
            <param name="pitchFlags">Pitch flags.</param>
            <param name="bufferCount">Output number of mipmap.</param>
            <param name="pixelSizeInBytes">Output total size to allocate pixel buffers for all images.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Image.SetupImageArray(System.IntPtr,System.Int32,SharpDX.Toolkit.Graphics.ImageDescription,SharpDX.Toolkit.Graphics.Image.PitchFlags,SharpDX.Toolkit.Graphics.PixelBuffer[])">
            <summary>
            Allocates PixelBuffers 
            </summary>
            <param name="buffer"></param>
            <param name="pixelSize"></param>
            <param name="imageDesc"></param>
            <param name="pitchFlags"></param>
            <param name="output"></param>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Image.DataPointer">
            <summary>
            Gets a pointer to the image buffer in memory.
            </summary>
            <value>A pointer to the image buffer in memory.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Image.PixelBuffer">
            <summary>
            Provides access to all pixel buffers.
            </summary>
            <remarks>
            For Texture3D, each z slice of the Texture3D has a pixelBufferArray * by the number of mipmaps.
            For other textures, there is Description.MipLevels * Description.ArraySize pixel buffers.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Image.TotalSizeInBytes">
            <summary>
            Gets the total number of bytes occupied by this image in memory.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ImageFileType">
            <summary>
            Image file format used by <see cref="M:SharpDX.Toolkit.Graphics.Image.Save(System.String,SharpDX.Toolkit.Graphics.ImageFileType)"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Dds">
            <summary>
            A DDS file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Png">
            <summary>
            A PNG file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Gif">
            <summary>
            A GIF file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Jpg">
            <summary>
            A JPG file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Bmp">
            <summary>
            A BMP file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Tiff">
            <summary>
            A TIFF file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Wmp">
            <summary>
            A WMP file.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Tga">
            <summary>
            A TGA File.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ImageFileType.Tktx">
            <summary>
            A TKTX File.
            </summary>
            <remarks>
            This is a format available with this toolkit, similar to DDS, but It doesn't require any conversion and is a straight dump of the memory pixel buffers.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelBuffer">
            <summary>
            An unmanaged buffer of pixels.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelBuffer.isStrictRowStride">
            <summary>
            True when RowStride == sizeof(pixelformat) * width
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.#ctor(System.Int32,System.Int32,SharpDX.DXGI.Format,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.PixelBuffer"/> struct.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="rowStride">The row pitch.</param>
            <param name="bufferStride">The slice pitch.</param>
            <param name="dataPointer">The pixels.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.CopyTo(SharpDX.Toolkit.Graphics.PixelBuffer)">
            <summary>
            Copies this pixel buffer to a destination pixel buffer.
            </summary>
            <param name="pixelBuffer">The destination pixel buffer.</param>
            <remarks>
            The destination pixel buffer must have exactly the same dimensions (width, height) and format than this instance.
            Destination buffer can have different row stride.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.Save(System.String,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this pixel buffer to a file.
            </summary>
            <param name="fileName">The destination file.</param>
            <param name="fileType">Specify the output format.</param>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.Save(System.IO.Stream,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this pixel buffer to a stream.
            </summary>
            <param name="imageStream">The destination stream.</param>
            <param name="fileType">Specify the output format.</param>
            <remarks>This method support the following format: <c>dds, bmp, jpg, png, gif, tiff, wmp, tga</c>.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.GetPixel``1(System.Int32,System.Int32)">
            <summary>
            Gets the pixel value at a specified position.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>The pixel value.</returns>
            <remarks>
            Caution, this method doesn't check bounding.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.SetPixel``1(System.Int32,System.Int32,``0)">
            <summary>
            Gets the pixel value at a specified position.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="value">The pixel value.</param>
            <remarks>
            Caution, this method doesn't check bounding.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.GetPixels``1(System.Int32)">
            <summary>
            Gets scanline pixels from the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="yOffset">The y line offset.</param>
            <returns>Scanline pixels from the buffer</returns>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <see cref="!:yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.GetPixels``1(``0[],System.Int32)">
            <summary>
            Gets scanline pixels from the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="pixels">An allocated scanline pixel buffer</param>
            <param name="yOffset">The y line offset.</param>
            <returns>Scanline pixels from the buffer</returns>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <see cref="!:yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.GetPixels``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets scanline pixels from the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="pixels">An allocated scanline pixel buffer</param>
            <param name="yOffset">The y line offset.</param>
            <param name="pixelIndex">Offset into the destination <see cref="!:pixels"/> buffer.</param>
            <param name="pixelCount">Number of pixels to write into the destination <see cref="!:pixels"/> buffer.</param>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <see cref="!:yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.SetPixels``1(``0[],System.Int32)">
            <summary>
            Sets scanline pixels to the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="sourcePixels">Source pixel buffer</param>
            <param name="yOffset">The y line offset.</param>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <see cref="!:yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelBuffer.SetPixels``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets scanline pixels to the buffer.
            </summary>
            <typeparam name="T">Type of the pixel data</typeparam>
            <param name="sourcePixels">Source pixel buffer</param>
            <param name="yOffset">The y line offset.</param>
            <param name="pixelIndex">Offset into the source <see cref="!:sourcePixels"/> buffer.</param>
            <param name="pixelCount">Number of pixels to write into the source <see cref="!:sourcePixels"/> buffer.</param>
            <exception cref="T:System.ArgumentException">If the sizeof(T) is an invalid size</exception>
            <remarks>
            This method is working on a row basis. The <see cref="!:yOffset"/> is specifying the first row to get 
            the pixels from.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.PixelSize">
            <summary>
            Gets the pixel size in bytes.
            </summary>
            <value>The pixel size in bytes.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.RowStride">
            <summary>
            Gets the row stride in number of bytes.
            </summary>
            <value>The row stride in number of bytes.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.BufferStride">
            <summary>
            Gets the total size in bytes of this pixel buffer.
            </summary>
            <value>The size in bytes of the pixel buffer.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.PixelBuffer.DataPointer">
            <summary>
            Gets the pointer to the pixel buffer.
            </summary>
            <value>The pointer to the pixel buffer.</value>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PresentationParameters">
            <summary>
              Describess how data will be displayed to the screen.
            </summary>
            <msdn-id>bb173075</msdn-id>
            <unmanaged>DXGI_SWAP_CHAIN_DESC</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_DESC</unmanaged-short>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.BackBufferFormat">
            <summary>
              A <strong><see cref="T:SharpDX.DXGI.Format"/></strong> structure describing the display format.
            </summary>
            <msdn-id>bb173075</msdn-id>
            <unmanaged>DXGI_MODE_DESC BufferDesc</unmanaged>
            <unmanaged-short>DXGI_MODE_DESC BufferDesc</unmanaged-short>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.BackBufferHeight">
            <summary>
              A value that describes the resolution height.
            </summary>
            <msdn-id>bb173075</msdn-id>
            <unmanaged>DXGI_MODE_DESC BufferDesc</unmanaged>
            <unmanaged-short>DXGI_MODE_DESC BufferDesc</unmanaged-short>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.BackBufferWidth">
            <summary>
              A value that describes the resolution width.
            </summary>
            <msdn-id>bb173075</msdn-id>
            <unmanaged>DXGI_MODE_DESC BufferDesc</unmanaged>
            <unmanaged-short>DXGI_MODE_DESC BufferDesc</unmanaged-short>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.DepthStencilFormat">
            <summary>
            Gets or sets the depth stencil format
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.DeviceWindowHandle">
            <summary>
              A Window object. See remarks.
            </summary>
            <remarks>
              A window object is platform dependent:
              <ul>
                <li>On Windows Desktop: This could a low level window/control handle (IntPtr), or directly a Winform Control object.</li>
                <li>On Windows Metro: This could be SwapChainBackgroundPanel object.</li>
              </ul>
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.Flags">
            <summary>
              A member of the <see cref="T:SharpDX.DXGI.SwapChainFlags"/>
              enumerated type that describes options for swap-chain behavior.
            </summary>
            <msdn-id>bb173075</msdn-id>
            <unmanaged>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged-short>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.IsFullScreen">
            <summary>
              Gets or sets a value indicating whether the application is in full screen mode.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.MultiSampleCount">
            <summary>
              Gets or sets a value indicating the number of sample locations during multisampling.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.PresentationInterval">
            <summary>
              Gets or sets the maximum rate at which the swap chain's back buffers can be presented to the front buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.RefreshRate">
            <summary>
              A <see cref="T:SharpDX.DXGI.Rational"/>   structure describing the refresh rate in hertz
            </summary>
            <msdn-id>bb173064</msdn-id>
            <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>
            <unmanaged-short>DXGI_RATIONAL RefreshRate</unmanaged-short>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentationParameters.RenderTargetUsage">
            <summary>
              <p>A member of the DXGI_USAGE enumerated type that describes the surface usage and CPU access options for the back buffer. The back buffer can  be used for shader input or render-target output.</p>
            </summary>
            <msdn-id>bb173075</msdn-id>
            <unmanaged>DXGI_USAGE_ENUM BufferUsage</unmanaged>
            <unmanaged-short>DXGI_USAGE_ENUM BufferUsage</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PresentationParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.PresentationParameters"/> class with default values.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PresentationParameters.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.PresentationParameters"/> class with <see cref="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8B8A8.UNorm"/>.
            </summary>
            <param name="backBufferWidth">Width of the back buffer.</param>
            <param name="backBufferHeight">Height of the back buffer.</param>
            <param name="deviceWindowHandle">The device window handle.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PresentationParameters.#ctor(System.Int32,System.Int32,System.Object,SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.PresentationParameters"/> class.
            </summary>
            <param name="backBufferWidth">Width of the back buffer.</param>
            <param name="backBufferHeight">Height of the back buffer.</param>
            <param name="deviceWindowHandle">The device window handle.</param>
            <param name="backBufferFormat">The back buffer format.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PresentInterval">
            <summary>
            Defines flags that describe the relationship between the adapter refresh rate and the rate at which Present operations are completed. 
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentInterval.Immediate">
            <summary>
            The runtime updates the window client area immediately, and might do so more than once during the adapter refresh period. Present operations might be affected immediately. This option is always available for both windowed and full-screen swap chains.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentInterval.One">
            <summary>
            The driver waits for the vertical retrace period (the runtime will beam trace to prevent tearing). Present operations are not affected more frequently than the screen refresh rate; the runtime completes one Present operation per adapter refresh period, at most. This option is always available for both windowed and full-screen swap chains.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentInterval.Two">
            <summary>
            The driver waits for the vertical retrace period. Present operations are not affected more frequently than every second screen refresh. 
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PresentInterval.Default">
            <summary>
            Equivalent to setting <see cref="F:SharpDX.Toolkit.Graphics.PresentInterval.One"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.AlphaTestEffect">
            <summary>
            Built-in effect that supports alpha testing.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Effect">
            <summary>
            Main class to apply shader effects.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Effect.ConstantBuffers">
            <summary>
              Gets a collection of constant buffers that are defined for this effect.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Effect.Parameters">
            <summary>
              Gets a collection of parameters that are defined for this effect.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Effect.Techniques">
            <summary>
              Gets a collection of techniques that are defined for this effect.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Effect.ShareConstantBuffers">
            <summary>
            Set to true to force all constant shaders to be shared between other effects within a common <see cref="T:SharpDX.Toolkit.Graphics.EffectPool"/>. Default is false.
            </summary>
            <remarks>
            This value can also be set in the TKFX file directly by setting ShareConstantBuffers = true; in a pass.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Effect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Effect"/> class with the specified bytecode effect. See remarks.
            </summary>
            <param name="device">The device.</param>
            <param name="bytecode">The bytecode to add to <see cref="F:SharpDX.Toolkit.Graphics.GraphicsDevice.DefaultEffectPool"/>. This bytecode must contain only one effect.</param>
            <exception cref="T:System.ArgumentException">If the bytecode doesn't contain a single effect.</exception>
            <remarks>
            The effect bytecode must contain only a single effect and will be registered into the <see cref="F:SharpDX.Toolkit.Graphics.GraphicsDevice.DefaultEffectPool"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Effect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.EffectData)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Effect"/> class with the specified bytecode effect. See remarks.
            </summary>
            <param name="device">The device.</param>
            <param name="effectData">The bytecode to add to <see cref="F:SharpDX.Toolkit.Graphics.GraphicsDevice.DefaultEffectPool"/>. This bytecode must contain only one effect.</param>
            <exception cref="T:System.ArgumentException">If the bytecode doesn't contain a single effect.</exception>
            <remarks>
            The effect bytecode must contain only a single effect and will be registered into the <see cref="F:SharpDX.Toolkit.Graphics.GraphicsDevice.DefaultEffectPool"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Effect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Effect"/> class with the specified effect. See remarks.
            </summary>
            <param name="device">The device.</param>
            <param name="effectName">Name of the effect.</param>
            <remarks>
            The effect must have been loaded and registered into the <see cref="F:SharpDX.Toolkit.Graphics.GraphicsDevice.DefaultEffectPool"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Effect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.EffectPool,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Effect"/> class with the specified effect loaded from an effect pool.
            </summary>
            <param name="device">The device.</param>
            <param name="pool">The effect pool.</param>
            <param name="effectName">Name of the effect.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Effect.Pool">
            <summary>
              Gets the pool this effect attached to.
            </summary>
            <value> The pool. </value>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Effect.Initialize(SharpDX.Toolkit.Graphics.EffectData.Effect)">
            <summary>
            Initializes the specified effect bytecode.
            </summary>
            <param name="effectDataArg">The effect bytecode.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="E:SharpDX.Toolkit.Graphics.Effect.OnApplyCallback">
            <summary>
              Occurs when the on apply is applied on a pass.
            </summary>
            <remarks>
              This external hook provides a way to pre-configure a pipeline when a pass is applied.
              Subclass of this class can override the method <see cref="M:SharpDX.Toolkit.Graphics.Effect.OnApply(SharpDX.Toolkit.Graphics.EffectPass)"/>.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Effect.CurrentTechnique">
            <summary>
            Gets or sets the current technique. By default, it is set to the first available technique in this effect.
            </summary>
            <value>The current technique.</value>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.AlphaTestEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Creates a new AlphaTestEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.AlphaTestEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.EffectPool)">
            <summary>
            Creates a new AlphaTestEffect with default parameter settings from a specified <see cref="T:SharpDX.Toolkit.Graphics.EffectPool"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.AlphaTestEffect.CacheEffectParameters">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.AlphaTestEffect.OnApply(SharpDX.Toolkit.Graphics.EffectPass)">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.Texture">
            <summary>
            Gets or sets the current texture.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.VertexColorEnabled">
            <summary>
            Gets or sets whether vertex color is enabled.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.AlphaFunction">
            <summary>
            Gets or sets the alpha compare function (default Greater).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.AlphaTestEffect.ReferenceAlpha">
            <summary>
            Gets or sets the reference alpha value (default 0).
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.BasicEffect">
            <summary>
            Built-in effect that supports optional texturing, vertex coloring, fog, and lighting.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BasicEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.BasicEffect"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BasicEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.EffectPool)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.BasicEffect"/> class from a specified <see cref="T:SharpDX.Toolkit.Graphics.EffectPool"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="pool">The pool.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BasicEffect.EnableDefaultLighting">
            <summary>
            Sets up the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BasicEffect.CacheEffectParameters(SharpDX.Toolkit.Graphics.BasicEffect)">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.BasicEffect.OnApply(SharpDX.Toolkit.Graphics.EffectPass)">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.EmissiveColor">
            <summary>
            Gets or sets the material emissive color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.SpecularColor">
            <summary>
            Gets or sets the material specular color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.SpecularPower">
            <summary>
            Gets or sets the material specular power.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.LightingEnabled">
            <summary>
            Gets or sets the lighting enable flag.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.PreferPerPixelLighting">
            <summary>
            Gets or sets the per-pixel lighting prefer flag.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.DirectionalLight0">
            <summary>
            Gets the first directional light.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.DirectionalLight1">
            <summary>
            Gets the second directional light.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.DirectionalLight2">
            <summary>
            Gets the third directional light.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.TextureEnabled">
            <summary>
            Gets or sets whether texturing is enabled.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.Texture">
            <summary>
            Gets or sets the current texture. Either use this property or <see cref="P:SharpDX.Toolkit.Graphics.BasicEffect.TextureView"/> but not both at the same time.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.Sampler">
            <summary>
            Gets or sets the current texture sampler. Default is <see cref="F:SharpDX.Toolkit.Graphics.SamplerStateCollection.Default"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.TextureView">
            <summary>
            Gets or sets the current texture view. Either use this property or <see cref="P:SharpDX.Toolkit.Graphics.BasicEffect.Texture"/> but not both at the same time.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.BasicEffect.VertexColorEnabled">
            <summary>
            Gets or sets whether vertex color is enabled.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DualTextureEffect">
            <summary>
            Built-in effect that supports two-layer multitexturing.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DualTextureEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Creates a new DualTextureEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DualTextureEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.EffectPool)">
            <summary>
            Creates a new DualTextureEffect with default parameter settings from a specified <see cref="T:SharpDX.Toolkit.Graphics.EffectPool"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DualTextureEffect.CacheEffectParameters">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DualTextureEffect.OnApply(SharpDX.Toolkit.Graphics.EffectPass)">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.Texture">
            <summary>
            Gets or sets the current base texture.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.Texture2">
            <summary>
            Gets or sets the current overlay texture.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.DualTextureEffect.VertexColorEnabled">
            <summary>
            Gets or sets whether vertex color is enabled.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EnvironmentMapEffect">
            <summary>
            Built-in effect that supports environment mapping.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Creates a new EnvironmentMapEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.EffectPool)">
            <summary>
            Creates a new EnvironmentMapEffect with default parameter settings from a specified <see cref="T:SharpDX.Toolkit.Graphics.EffectPool"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.EnableDefaultLighting">
            <summary>
            Sets up the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.CacheEffectParameters(SharpDX.Toolkit.Graphics.EnvironmentMapEffect)">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.OnApply(SharpDX.Toolkit.Graphics.EffectPass)">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.EmissiveColor">
            <summary>
            Gets or sets the material emissive color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.DirectionalLight0">
            <summary>
            Gets the first directional light.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.DirectionalLight1">
            <summary>
            Gets the second directional light.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.DirectionalLight2">
            <summary>
            Gets the third directional light.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.Texture">
            <summary>
            Gets or sets the current texture.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.EnvironmentMap">
            <summary>
            Gets or sets the current environment map texture.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.EnvironmentMapAmount">
            <summary>
            Gets or sets the amount of the environment map RGB that will be blended over 
            the base texture. Range 0 to 1, default 1. If set to zero, the RGB channels 
            of the environment map will completely ignored (but the environment map alpha 
            may still be visible if EnvironmentMapSpecular is greater than zero).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.EnvironmentMapSpecular">
            <summary>
            Gets or sets the amount of the environment map alpha channel that will 
            be added to the base texture. Range 0 to 1, default 0. This can be used 
            to implement cheap specular lighting, by encoding one or more specular 
            highlight patterns into the environment map alpha channel, then setting 
            EnvironmentMapSpecular to the desired specular light color.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.FresnelFactor">
            <summary>
            Gets or sets the Fresnel factor used for the environment map blending. 
            Higher values make the environment map only visible around the silhouette 
            edges of the object, while lower values make it visible everywhere. 
            Setting this property to 0 disables Fresnel entirely, making the 
            environment map equally visible regardless of view angle. The default is 
            1. Fresnel only affects the environment map RGB (the intensity of which is 
            controlled by EnvironmentMapAmount). The alpha contribution (controlled by 
            EnvironmentMapSpecular) is not affected by the Fresnel setting.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.EnvironmentMapEffect.SharpDX#Toolkit#Graphics#IEffectLights#LightingEnabled">
            <summary>
            This effect requires lighting, so we explicitly implement
            IEffectLights.LightingEnabled, and do not allow turning it off.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectDirtyFlags">
            <summary>
            Track which effect parameters need to be recomputed during the next OnApply.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.EffectHelpers">
            <summary>
            Helper code shared between the various built-in effects.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectHelpers.EnableDefaultLighting(SharpDX.Toolkit.Graphics.DirectionalLight,SharpDX.Toolkit.Graphics.DirectionalLight,SharpDX.Toolkit.Graphics.DirectionalLight)">
            <summary>
            Sets up the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectHelpers.SetWorldViewProjAndFog(SharpDX.Toolkit.Graphics.EffectDirtyFlags,SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Matrix@,System.Boolean,System.Single,System.Single,SharpDX.Toolkit.Graphics.EffectParameter,SharpDX.Toolkit.Graphics.EffectParameter)">
            <summary>
            Lazily recomputes the world+view+projection matrix and
            fog vector based on the current effect parameter settings.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectHelpers.SetFogVector(SharpDX.Matrix@,System.Single,System.Single,SharpDX.Toolkit.Graphics.EffectParameter)">
            <summary>
            Sets a vector which can be dotted with the object space vertex position to compute fog amount.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectHelpers.SetLightingMatrices(SharpDX.Toolkit.Graphics.EffectDirtyFlags,SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Toolkit.Graphics.EffectParameter,SharpDX.Toolkit.Graphics.EffectParameter,SharpDX.Toolkit.Graphics.EffectParameter)">
            <summary>
            Lazily recomputes the world inverse transpose matrix and
            eye position based on the current effect parameter settings.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.EffectHelpers.SetMaterialColor(System.Boolean,System.Single,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Toolkit.Graphics.EffectParameter,SharpDX.Toolkit.Graphics.EffectParameter)">
            <summary>
            Sets the diffuse/emissive/alpha material color parameters.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SkinnedEffect">
            <summary>
            Built-in effect for rendering skinned character models.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SkinnedEffect.SetBoneTransforms(SharpDX.Matrix[])">
            <summary>
            Sets an array of skinning bone transform matrices.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SkinnedEffect.GetBoneTransforms(System.Int32)">
            <summary>
            Gets a copy of the current skinning bone transform matrices.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SkinnedEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Creates a new SkinnedEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SkinnedEffect.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.EffectPool)">
            <summary>
            Creates a new SkinnedEffect with default parameter settings from a specified <see cref="T:SharpDX.Toolkit.Graphics.EffectPool"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SkinnedEffect.EnableDefaultLighting">
            <summary>
            Sets up the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SkinnedEffect.CacheEffectParameters(SharpDX.Toolkit.Graphics.SkinnedEffect)">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SkinnedEffect.OnApply(SharpDX.Toolkit.Graphics.EffectPass)">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.EmissiveColor">
            <summary>
            Gets or sets the material emissive color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.SpecularColor">
            <summary>
            Gets or sets the material specular color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.SpecularPower">
            <summary>
            Gets or sets the material specular power.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.PreferPerPixelLighting">
            <summary>
            Gets or sets the per-pixel lighting prefer flag.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.DirectionalLight0">
            <summary>
            Gets the first directional light.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.DirectionalLight1">
            <summary>
            Gets the second directional light.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.DirectionalLight2">
            <summary>
            Gets the third directional light.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.Texture">
            <summary>
            Gets or sets the current texture.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.WeightsPerVertex">
            <summary>
            Gets or sets the number of skinning weights to evaluate for each vertex (1, 2, or 4).
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.SkinnedEffect.SharpDX#Toolkit#Graphics#IEffectLights#LightingEnabled">
            <summary>
            This effect requires lighting, so we explicitly implement
            IEffectLights.LightingEnabled, and do not allow turning it off.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureContentReader">
            <summary>
            Internal class to load Texture.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureDimension">
            <summary>
            Defines the dimension of a texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDimension.Texture1D">
            <summary>
            The texture dimension is 1D.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDimension.Texture2D">
            <summary>
            The texture dimension is 2D.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDimension.Texture3D">
            <summary>
            The texture dimension is 3D.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDimension.TextureCube">
            <summary>
            The texture dimension is a CubeMap.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureFlags">
            <summary>
            Specifies usage of a texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureFlags.ShaderResource">
            <summary>
            The texture will be used as a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureFlags.RenderTarget">
            <summary>
            The texture will be used as a <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureFlags.UnorderedAccess">
            <summary>
            The texture will be used as an <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.UnorderedAccessViewSelector">
            <summary>
            Used by <see cref="T:SharpDX.Toolkit.Graphics.Texture"/> to provide a selector to a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.UnorderedAccessViewSelector.Item(System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> from this texture.
            </summary>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ShaderResourceViewSelector">
            <summary>
            Used by <see cref="T:SharpDX.Toolkit.Graphics.Texture"/> to provide a selector to a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.ShaderResourceViewSelector.Item(SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTargetViewSelector">
            <summary>
            Used by <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> to provide a selector to a <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.RenderTargetViewSelector.Item(SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.RenderTargetView"/> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.RenderTargetView"/></returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.VertexInputLayout">
            <summary>	
            Defines the layout of all vertex buffers that will be bound to the input-assembler stage. 
            This structure is related to <see cref="T:SharpDX.Direct3D11.InputElement"/>.
            </summary>	
            <remarks>	
            <p>Because <see cref="T:SharpDX.Direct3D11.InputElement"/> requires to have the same <see cref="F:SharpDX.Direct3D11.InputElement.Slot"/>, <see cref="F:SharpDX.Direct3D11.InputElement.InstanceDataStepRate"/>,
            this <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/> structure encapsulates a set of <see cref="T:SharpDX.Toolkit.Graphics.VertexBufferLayout"/>.</p>
            <p>
            This class is caching <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/> to improve performance.
            The same description set of <see cref="T:SharpDX.Toolkit.Graphics.VertexBufferLayout"/> will return the same <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/> instance.
            </p>
            </remarks>	
            <seealso cref="T:SharpDX.Toolkit.Graphics.VertexElement"/>
            <msdn-id>ff476180</msdn-id>	
            <unmanaged>D3D11_INPUT_ELEMENT_DESC</unmanaged>	
            <unmanaged-short>D3D11_INPUT_ELEMENT_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexInputLayout.Id">
            <summary>
            Gets a unique identifier of this VertexInputLayout configuration.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexInputLayout.BufferLayouts">
            <summary>
            Gets the buffer layout.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexInputLayout.#ctor(System.Int32,SharpDX.Toolkit.Graphics.ReadOnlyArray{SharpDX.Toolkit.Graphics.VertexBufferLayout})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="bufferLayouts">The vertex buffer layouts.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexInputLayout.op_Equality(SharpDX.Toolkit.Graphics.VertexInputLayout,SharpDX.Toolkit.Graphics.VertexInputLayout)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexInputLayout.op_Inequality(SharpDX.Toolkit.Graphics.VertexInputLayout,SharpDX.Toolkit.Graphics.VertexInputLayout)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexInputLayout.New(System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/> with a single slot from a structure that is using <see cref="T:SharpDX.Toolkit.Graphics.VertexElementAttribute"/>.
            </summary>
            <param name="slot">The slot index in the input-assembler stage.</param>
            <param name="structType">Type of a structure that is using <see cref="T:SharpDX.Toolkit.Graphics.VertexElementAttribute"/>.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/>.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexInputLayout.New``1(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/> with a single slot from a structure that is using <see cref="T:SharpDX.Toolkit.Graphics.VertexElementAttribute"/>.
            </summary>
            <typeparam name="T">Type of a structure that is using <see cref="T:SharpDX.Toolkit.Graphics.VertexElementAttribute"/>.</typeparam>
            <param name="slot">The slot index in the input-assembler stage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/>.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexInputLayout.FromBuffer``1(System.Int32,SharpDX.Toolkit.Graphics.Buffer{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/> with a single slot from a structure that is using <see cref="T:SharpDX.Toolkit.Graphics.VertexElementAttribute"/>.
            </summary>
            <typeparam name="T">Type of a structure that is using <see cref="T:SharpDX.Toolkit.Graphics.VertexElementAttribute"/>.</typeparam>
            <param name="slot">The slot index in the input-assembler stage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/>.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexInputLayout.New(System.Int32,SharpDX.Toolkit.Graphics.VertexElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/> with a single slot.
            </summary>
            <param name="slot">The slot index in the input-assembler stage.</param>
            <param name="vertexElements">Description of vertex elements.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/>.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexInputLayout.New(SharpDX.Toolkit.Graphics.VertexBufferLayout[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/>.
            </summary>
            <param name="layouts">A set of description of input layout for each slots in input-assembler stage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.VertexInputLayout"/>.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.VertexPositionTexture">
            <summary>
            Describes a custom vertex format structure that contains position and color information. 
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexPositionTexture.#ctor(SharpDX.Vector3,SharpDX.Vector2)">
            <summary>
            Initializes a new <see cref="T:SharpDX.Toolkit.Graphics.VertexPositionTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionTexture.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.VertexPositionNormalTexture">
            <summary>
            Describes a custom vertex format structure that contains position and color information. 
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexPositionNormalTexture.#ctor(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector2)">
            <summary>
            Initializes a new <see cref="T:SharpDX.Toolkit.Graphics.VertexPositionNormalTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="normal">The vertex normal.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionNormalTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionNormalTexture.Normal">
            <summary>
            The vertex normal.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionNormalTexture.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.VertexPositionColorTexture">
            <summary>
            Describes a custom vertex format structure that contains position and color information. 
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexPositionColorTexture.#ctor(SharpDX.Vector3,SharpDX.Color,SharpDX.Vector2)">
            <summary>
            Initializes a new <see cref="T:SharpDX.Toolkit.Graphics.VertexPositionColorTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="color">The color of this vertex.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionColorTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionColorTexture.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionColorTexture.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.SamplerState">
            <summary>
            SamplerState is equivalent to <see cref="T:SharpDX.Direct3D11.SamplerState"/>.
            </summary>
            <msdn-id>ff476588</msdn-id>	
            <unmanaged>ID3D11SamplerState</unmanaged>	
            <unmanaged-short>ID3D11SamplerState</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.SamplerState.Description">
            <summary>
            Gets the description of this sampler state.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SamplerState.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.SamplerStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.SamplerState"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SamplerState.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.SamplerState)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.SamplerState"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="nativeState">State of the native.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SamplerState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.SamplerState)">
            <summary>	
            <p>Create a sampler-state object that encapsulates sampling information for a texture.</p>	
            </summary>	
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="samplerState">An existing <see cref="T:SharpDX.Direct3D11.SamplerState"/> instance.</param>	
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.SamplerState"/> instance</returns>	
            <remarks>	
            <p>4096 unique sampler state objects can be created on a device at a time.</p><p>If an application attempts to create a sampler-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique sampler state objects will stay the same.</p>	
            </remarks>	
            <msdn-id>ff476518</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateSamplerState([In] const D3D11_SAMPLER_DESC* pSamplerDesc,[Out, Fast] ID3D11SamplerState** ppSamplerState)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateSamplerState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SamplerState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.SamplerStateDescription)">
            <summary>	
            <p>Create a sampler-state object that encapsulates sampling information for a texture.</p>	
            </summary>	
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">A sampler state description</param>	
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.SamplerState"/> instance</returns>	
            <remarks>	
            <p>4096 unique sampler state objects can be created on a device at a time.</p><p>If an application attempts to create a sampler-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique sampler state objects will stay the same.</p>	
            </remarks>	
            <msdn-id>ff476518</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateSamplerState([In] const D3D11_SAMPLER_DESC* pSamplerDesc,[Out, Fast] ID3D11SamplerState** ppSamplerState)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateSamplerState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SamplerState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Direct3D11.SamplerStateDescription)">
            <summary>	
            <p>Create a sampler-state object that encapsulates sampling information for a texture.</p>	
            </summary>	
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="name">Name of this sampler state.</param>
            <param name="description">A sampler state description</param>	
            <returns>A new <see cref="T:SharpDX.Toolkit.Graphics.SamplerState"/> instance</returns>	
            <remarks>	
            <p>4096 unique sampler state objects can be created on a device at a time.</p><p>If an application attempts to create a sampler-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique sampler state objects will stay the same.</p>	
            </remarks>	
            <msdn-id>ff476518</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateSamplerState([In] const D3D11_SAMPLER_DESC* pSamplerDesc,[Out, Fast] ID3D11SamplerState** ppSamplerState)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateSamplerState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.SamplerState.op_Implicit(SharpDX.Toolkit.Graphics.SamplerState)~SharpDX.Direct3D11.SamplerState">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Resource"/>
            </summary>
            <param name="from">The GraphicsState to convert from.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PrimitiveType">
            <summary>
            Values that indicate how the pipeline interprets vertex data that is bound to the input-assembler stage. These primitive topology values determine how the vertex data is rendered on screen.
            PrimitiveType is equivalent to <see cref="T:SharpDX.Direct3D.PrimitiveTopology"/>.
            </summary>
            <remarks>
            This structure is implicitly castable to and from <see cref="T:SharpDX.Direct3D.PrimitiveTopology"/>, you can use it inplace where <see cref="T:SharpDX.Direct3D.PrimitiveTopology"/> is required
            and vice-versa.
            </remarks>
            <msdn-id>ff728726</msdn-id>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.Value">
            <summary>
            Gets the value as a <see cref="T:SharpDX.Direct3D.PrimitiveTopology"/> enum.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveType.#ctor(SharpDX.Direct3D.PrimitiveTopology)">
            <summary>
            Internal constructor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.Undefined">
            <summary>	
            The IA stage has not been initialized with a primitive topology. The IA stage will not function properly unless a primitive topology is defined.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_UNDEFINED</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_UNDEFINED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.PointList">
            <summary>	
            Interpret the vertex data as a list of points.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_POINTLIST</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_POINTLIST</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.LineList">
            <summary>	
            Interpret the vertex data as a list of lines.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINELIST</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_LINELIST</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.LineStrip">
            <summary>	
            Interpret the vertex data as a line strip.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.TriangleList">
            <summary>	
            Interpret the vertex data as a list of triangles.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.TriangleStrip">
            <summary>	
            Interpret the vertex data as a triangle strip.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.LineListWithAdjacency">
            <summary>	
            Interpret the vertex data as a list of lines with adjacency data.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.LineStripWithAdjacency">
            <summary>	
            Interpret the vertex data as a line strip with adjacency data.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.TriangleListWithAdjacency">
            <summary>	
            Interpret the vertex data as a list of triangles with adjacency data.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PrimitiveType.TriangleStripWithAdjacency">
            <summary>	
            Interpret the vertex data as a triangle strip with adjacency data.
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PrimitiveType.PatchList(System.Int32)">
            <summary>	
            Interpret the vertex data as a patch list.
            </summary>	
            <param name="controlPoints">Number of control points. Value must be in the range 1 to 32.</param>
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ</unmanaged>	
            <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ</unmanaged-short>	
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RasterizerState">
            <summary>
            RasterizerState is equivalent to <see cref="T:SharpDX.Direct3D11.RasterizerState"/>.
            </summary>
            <msdn-id>ff476580</msdn-id>	
            <unmanaged>ID3D11RasterizerState</unmanaged>	
            <unmanaged-short>ID3D11RasterizerState</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.RasterizerState.Description">
            <summary>
            Gets the description of this blend state.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RasterizerState.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.RasterizerStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.RasterizerState"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RasterizerState.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.RasterizerState)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.RasterizerState"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="nativeState">State of the native.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RasterizerState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.RasterizerState)">
            <summary>	
            <p>Create a rasterizer state object that tells the rasterizer stage how to behave.</p>	
            </summary>	
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="rasterizerState">An existing <see cref="T:SharpDX.Direct3D11.RasterizerState"/> instance.</param>	
            <remarks>	
            <p>4096 unique rasterizer state objects can be created on a device at a time.</p><p>If an application attempts to create a rasterizer-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique rasterizer state objects will stay the same.</p>	
            </remarks>	
            <msdn-id>ff476516</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateRasterizerState([In] const D3D11_RASTERIZER_DESC* pRasterizerDesc,[Out, Fast] ID3D11RasterizerState** ppRasterizerState)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateRasterizerState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RasterizerState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.RasterizerStateDescription)">
            <summary>	
            <p>Create a rasterizer state object that tells the rasterizer stage how to behave.</p>	
            </summary>	
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">A rasterizer state description</param>	
            <remarks>	
            <p>4096 unique rasterizer state objects can be created on a device at a time.</p><p>If an application attempts to create a rasterizer-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique rasterizer state objects will stay the same.</p>	
            </remarks>	
            <msdn-id>ff476516</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateRasterizerState([In] const D3D11_RASTERIZER_DESC* pRasterizerDesc,[Out, Fast] ID3D11RasterizerState** ppRasterizerState)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateRasterizerState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RasterizerState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Direct3D11.RasterizerStateDescription)">
            <summary>	
            <p>Create a rasterizer state object that tells the rasterizer stage how to behave.</p>	
            </summary>	
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="name">Name of this depth stencil state.</param>
            <param name="description">A rasterizer state description</param>	
            <remarks>	
            <p>4096 unique rasterizer state objects can be created on a device at a time.</p><p>If an application attempts to create a rasterizer-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique rasterizer state objects will stay the same.</p>	
            </remarks>	
            <msdn-id>ff476516</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateRasterizerState([In] const D3D11_RASTERIZER_DESC* pRasterizerDesc,[Out, Fast] ID3D11RasterizerState** ppRasterizerState)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateRasterizerState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RasterizerState.op_Implicit(SharpDX.Toolkit.Graphics.RasterizerState)~SharpDX.Direct3D11.RasterizerState">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Resource"/>
            </summary>
            <param name="from">The GraphicsState to convert from.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DepthStencilState">
            <summary>
            DepthStencilState is equivalent to <see cref="T:SharpDX.Direct3D11.DepthStencilState"/>.
            </summary>
            <msdn-id>ff476375</msdn-id>	
            <unmanaged>ID3D11DepthStencilState</unmanaged>	
            <unmanaged-short>ID3D11DepthStencilState</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilState.Description">
            <summary>
            Gets the description of this blend state.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilState.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.DepthStencilStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilState"/> class.
            </summary>
            <param name="device">The device local.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilState.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.DepthStencilState)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilState"/> class.
            </summary>
            <param name="device">The device local.</param>
            <param name="nativeState">State of the native.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.DepthStencilState)">
            <summary>	
            Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage.
            </summary>	
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="depthStencilState">An existing <see cref="T:SharpDX.Direct3D11.DepthStencilState"/> instance.</param>	
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilState"/></returns>	
            <remarks>	
            <p>4096 unique depth-stencil state objects can be created on a device at a time.</p><p>If an application attempts to create a depth-stencil-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique depth-stencil state objects will stay the same.</p>	
            </remarks>	
            <msdn-id>ff476506</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateDepthStencilState([In] const D3D11_DEPTH_STENCIL_DESC* pDepthStencilDesc,[Out, Fast] ID3D11DepthStencilState** ppDepthStencilState)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateDepthStencilState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.DepthStencilStateDescription)">
            <summary>	
            Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage.
            </summary>	
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">A depth-stencil state description</param>	
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilState"/></returns>	
            <remarks>	
            <p>4096 unique depth-stencil state objects can be created on a device at a time.</p><p>If an application attempts to create a depth-stencil-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique depth-stencil state objects will stay the same.</p>	
            </remarks>	
            <msdn-id>ff476506</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateDepthStencilState([In] const D3D11_DEPTH_STENCIL_DESC* pDepthStencilDesc,[Out, Fast] ID3D11DepthStencilState** ppDepthStencilState)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateDepthStencilState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilState.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Direct3D11.DepthStencilStateDescription)">
            <summary>	
            Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="name">Name of this depth stencil state.</param>
            <param name="description">A depth-stencil state description</param>	
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilState"/></returns>	
            <remarks>	
            <p>4096 unique depth-stencil state objects can be created on a device at a time.</p><p>If an application attempts to create a depth-stencil-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique depth-stencil state objects will stay the same.</p>	
            </remarks>	
            <msdn-id>ff476506</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateDepthStencilState([In] const D3D11_DEPTH_STENCIL_DESC* pDepthStencilDesc,[Out, Fast] ID3D11DepthStencilState** ppDepthStencilState)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateDepthStencilState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilState.op_Implicit(SharpDX.Toolkit.Graphics.DepthStencilState)~SharpDX.Direct3D11.DepthStencilState">
            <summary>
            Implicit casting operator to <see cref="T:SharpDX.Direct3D11.Resource"/>
            </summary>
            <param name="from">The GraphicsState to convert from.</param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DepthFormat">
            <summary>
            Defines the format of data in a depth-stencil buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.None">
            <summary>
            No depth stencil buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.Depth16">
            <summary>
            A buffer that contains 16-bits of depth data.
            </summary>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.Depth24Stencil8">
            <summary>
            A 32 bit buffer that contains 24 bits of depth data and 8 bits of stencil data.
            </summary>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.Depth32">
            <summary>
            A buffer that contains 32-bits of depth data.
            </summary>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthFormat.Depth32Stencil8X24">
            <summary>
            A double 32 bit buffer that contains 32 bits of depth data and 8 bits padded with 24 zero bits of stencil data.
            </summary>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged-short>	
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer">
            <summary>
            A DepthStencilBuffer frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.DepthStencil"/>.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture2DBase">
            <summary>
            Abstract class frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture">
            <summary>
            Base class for texture resources.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.Description">
            <summary>
            Common description for this texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.ShaderResourceView">
            <summary>
            Gets the selector for a <see cref="F:SharpDX.Toolkit.Graphics.Texture.ShaderResourceView"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.RenderTargetView">
            <summary>
            Gets the selector for a <see cref="F:SharpDX.Toolkit.Graphics.Texture.RenderTargetView"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.UnorderedAccessView">
            <summary>
            Gets the selector for a <see cref="F:SharpDX.Toolkit.Graphics.Texture.UnorderedAccessView"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.IsBlockCompressed">
            <summary>
            Gets a boolean indicating whether this <see cref="T:SharpDX.Toolkit.Graphics.Texture"/> is a using a block compress format (BC1, BC2, BC3, BC4, BC5, BC6H, BC7).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.RowStride">
            <summary>
            The width stride in bytes (number of bytes per row).
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.Texture.DepthStride">
            <summary>
            The depth stride in bytes (number of bytes per depth slice).
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.InitializeViews">
            <summary>
            Initializes the views provided by this texture.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetMipMapDescription(System.Int32)">
            <summary>
            Gets the mipmap description of this instance for the specified mipmap level.
            </summary>
            <param name="mipmap">The mipmap.</param>
            <returns>A description of a particular mipmap for this texture.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GenerateMipMaps">
            <summary>
            Generates the mip maps for this texture. See remarks.
            </summary>
            <exception cref="T:System.NotSupportedException">Cannot generate mipmaps for this texture (Must be RenderTarget and ShaderResource and MipLevels &gt; 1</exception>
            <remarks>This method is only working for texture that are RenderTarget and ShaderResource and with MipLevels &gt; 1</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GenerateMipMaps(SharpDX.Toolkit.Graphics.GraphicsDevice)">
            <summary>
            Generates the mip maps for this texture. See remarks.
            </summary>
            <param name="device">The device.</param>
            <exception cref="T:System.NotSupportedException">Cannot generate mipmaps for this texture (Must be RenderTarget and ShaderResource and MipLevels &gt; 1</exception>
            <remarks>This method is only working for texture that are RenderTarget and ShaderResource and with MipLevels &gt; 1</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateMipLevels(System.Int32,SharpDX.Toolkit.Graphics.MipMapCount)">
            <summary>
            Calculates the number of miplevels for a Texture 1D.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="mipLevels">A <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>, set to true to calculates all mipmaps, to false to calculate only 1 miplevel, or &gt; 1 to calculate a specific amount of levels.</param>
            <returns>The number of miplevels.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateMipLevels(System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount)">
            <summary>
            Calculates the number of miplevels for a Texture 2D.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="mipLevels">A <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>, set to true to calculates all mipmaps, to false to calculate only 1 miplevel, or &gt; 1 to calculate a specific amount of levels.</param>
            <returns>The number of miplevels.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateMipLevels(System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount)">
            <summary>
            Calculates the number of miplevels for a Texture 2D.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="mipLevels">A <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>, set to true to calculates all mipmaps, to false to calculate only 1 miplevel, or &gt; 1 to calculate a specific amount of levels.</param>
            <returns>The number of miplevels.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetSubResourceIndex(System.Int32,System.Int32)">
            <summary>
            Gets the absolute sub-resource index from the array and mip slice.
            </summary>
            <param name="arraySlice">The array slice index.</param>
            <param name="mipSlice">The mip slice index.</param>
            <returns>A value equals to arraySlice * Description.MipLevels + mipSlice.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateWidth``1(System.Int32)">
            <summary>
            Calculates the expected width of a texture using a specified type.
            </summary>
            <typeparam name="TData">The type of the T pixel data.</typeparam>
            <returns>The expected width</returns>
            <exception cref="T:System.ArgumentException">If the size is invalid</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculatePixelDataCount``1(System.Int32)">
            <summary>
            Calculates the number of pixel data this texture is requiring for a particular mip level.
            </summary>
            <typeparam name="TData">The type of the T pixel data.</typeparam>
            <param name="mipLevel">The mip level.</param>
            <returns>The number of pixel data.</returns>
            <remarks>This method is used to allocated a texture data buffer to hold pixel datas: var textureData = new T[ texture.CalculatePixelCount&lt;T&gt;() ] ;.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Clone``1">
            <summary>
            Makes a copy of this texture with type casting.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetData``1(System.Int32,System.Int32)">
            <summary>
            Gets the content of this texture to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="arrayOrDepthSlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <returns>The texture data.</returns>
            <msdn-id>ff476457</msdn-id>
              <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
              <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Copies the content of this texture to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="toData">The destination buffer to receive a copy of the texture datas.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <msdn-id>ff476457</msdn-id>
              <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
              <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.TextureDescription)">
            <summary>
            Creates a new texture with the specified generic texture description.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="description">The description.</param>
            <returns>A Texture instance, either a RenderTarget or DepthStencilBuffer or Texture, depending on Binding flags.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetData``1(SharpDX.Toolkit.Graphics.Texture,``0[],System.Int32,System.Int32)">
            <summary>
            Copies the content of this texture from GPU memory to an array of data on CPU memory using a specific staging resource.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="stagingTexture">The staging texture used to transfer the texture to.</param>
            <param name="toData">To data.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetData(SharpDX.Toolkit.Graphics.Texture,SharpDX.DataPointer,System.Int32,System.Int32)">
            <summary>
            Copies the content of this texture from GPU memory to a pointer on CPU memory using a specific staging resource.
            </summary>
            <param name="stagingTexture">The staging texture used to transfer the texture to.</param>
            <param name="toData">The pointer to data in CPU memory.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.SetData``1(``0[],System.Int32,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})">
            <summary>
            Copies the content an array of data on CPU memory to this texture into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
            <remarks>
            This method is only working on the main graphics device. Use method with explicit graphics device to set data on a deferred context.
            See also unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.SetData(SharpDX.DataPointer,System.Int32,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})">
            <summary>
            Copies the content an data on CPU memory to this texture into GPU memory using the specified <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/> (The graphics device could be deffered).
            </summary>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
            <remarks>
            This method is only working on the main graphics device. Use method with explicit graphics device to set data on a deferred context.
            See also unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.SetData``1(SharpDX.Toolkit.Graphics.GraphicsDevice,``0[],System.Int32,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})">
            <summary>
            Copies the content an array of data on CPU memory to this texture into GPU memory using the specified <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/> (The graphics device could be deffered).
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
            <remarks>
            See unmanaged documentation for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.SetData(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.DataPointer,System.Int32,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})">
            <summary>
            Copies the content an data on CPU memory to this texture into GPU memory.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
            <remarks>
            See unmanaged documentation for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.SetData(SharpDX.Toolkit.Graphics.Image)">
            <summary>
            Copies the content of an image to this texture.
            </summary>
            <param name="image">The source image to copy from.</param>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
            <remarks>
            See unmanaged documentation for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.SetData(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.Image)">
            <summary>
            Copies the content of an image to this texture.
            </summary>
            <param name="graphicsDevice">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="image">The source image to copy from.</param>
            <exception cref="T:System.ArgumentException">Image is not same dimension and/or format than this texture</exception>
            <msdn-id>ff476457</msdn-id>	
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] unsigned int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Map</unmanaged-short>	
            <remarks>
            See unmanaged documentation for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetShaderResourceView(SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="F:SharpDX.Toolkit.Graphics.Texture.ShaderResourceView"/> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>An <see cref="F:SharpDX.Toolkit.Graphics.Texture.ShaderResourceView"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetRenderTargetView(SharpDX.Toolkit.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="F:SharpDX.Toolkit.Graphics.Texture.RenderTargetView"/> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipMapSlice">The mip map slice index.</param>
            <returns>An <see cref="F:SharpDX.Toolkit.Graphics.Texture.RenderTargetView"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetUnorderedAccessView(System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="F:SharpDX.Toolkit.Graphics.Texture.UnorderedAccessView"/> from this texture.
            </summary>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipMapSlice">The mip map slice index.</param>
            <returns>An <see cref="F:SharpDX.Toolkit.Graphics.Texture.UnorderedAccessView"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.op_Implicit(SharpDX.Toolkit.Graphics.Texture)~SharpDX.Direct3D11.ShaderResourceView">
            <summary>
            ShaderResourceView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.op_Implicit(SharpDX.Toolkit.Graphics.Texture)~SharpDX.Direct3D11.UnorderedAccessView">
            <summary>
            UnorderedAccessView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a texture from a file.
            </summary>
            <param name="device">Specify the <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/> used to load and create a texture from a file.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Save(System.IO.Stream,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this texture to a stream with a specified format.
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileType">Type of the image file.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetDataAsImage">
            <summary>
            Gets the GPU content of this texture as an <see cref="T:SharpDX.Toolkit.Graphics.Image"/> on the CPU.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.GetDataAsImage(SharpDX.Toolkit.Graphics.Texture)">
            <summary>
            Gets the GPU content of this texture to an <see cref="T:SharpDX.Toolkit.Graphics.Image"/> on the CPU.
            </summary>
            <param name="stagingTexture">The staging texture used to temporary transfer the image from the GPU to CPU.</param>
            <exception cref="T:System.ArgumentException">If stagingTexture is not a staging texture.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Save(System.IO.Stream,SharpDX.Toolkit.Graphics.Texture,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this texture to a stream with a specified format.
            </summary>
            <param name="stream">The stream.</param>
            <param name="stagingTexture">The staging texture used to temporary transfer the image from the GPU to CPU.</param>
            <param name="fileType">Type of the image file.</param>
            <exception cref="T:System.ArgumentException">If stagingTexture is not a staging texture.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Save(System.String,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this texture to a file with a specified format.
            </summary>
            <param name="filePath">The filepath to save the texture to.</param>
            <param name="fileType">Type of the image file.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.Save(System.String,SharpDX.Toolkit.Graphics.Texture,SharpDX.Toolkit.Graphics.ImageFileType)">
            <summary>
            Saves this texture to a stream with a specified format.
            </summary>
            <param name="filePath">The filepath to save the texture to.</param>
            <param name="stagingTexture">The staging texture used to temporary transfer the image from the GPU to CPU.</param>
            <param name="fileType">Type of the image file.</param>
            <exception cref="T:System.ArgumentException">If stagingTexture is not a staging texture.</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture.CalculateMipMapCount(SharpDX.Toolkit.Graphics.MipMapCount,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the mip map count from a requested level.
            </summary>
            <param name="requestedLevel">The requested level.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <returns>The resulting mipmap count (clamp to [1, maxMipMapCount] for this texture)</returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Texture.Width">
            <summary>	
            <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is valid for all textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Texture.Height">
            <summary>	
            <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.Texture.Depth">
            <summary>	
            <dd> <p>Texture depth (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture2DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description2D">The description.</param>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2DDescription,SharpDX.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture2DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description2D">The description.</param>
            <param name="dataBoxes">A variable-length parameters list containing data rectangles.</param>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The texture.</param>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2DBase.op_Implicit(SharpDX.Toolkit.Graphics.Texture2DBase)~SharpDX.DXGI.Surface">
            <summary>
            <see cref="T:SharpDX.DXGI.Surface"/> casting operator.
            </summary>
            <param name="from">From the Texture1D.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.DepthFormat">
            <summary>
            Gets the <see cref="T:SharpDX.Toolkit.Graphics.DepthFormat"/> of this depth stencil buffer.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.HasStencil">
            <summary>
            Gets a boolean value indicating if this buffer is supporting stencil.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.HasReadOnlyView">
            <summary>
            Gets a boolean value indicating if this buffer is supporting read-only view.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.DepthStencilBuffer.ReadOnlyView">
            <summary>
            Gets a a read-only <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>.
            </summary>
            <remarks>
            This value can be null if not supported by hardware (minimum features level is 11.0)
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.op_Implicit(SharpDX.Toolkit.Graphics.DepthStencilBuffer)~SharpDX.Direct3D11.DepthStencilView">
            <summary>
            DepthStencilView casting operator.
            </summary>
            <param name="buffer">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/> from a <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/> from a <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.DepthFormat,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.DepthStencilBuffer.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MSAALevel,SharpDX.Toolkit.Graphics.DepthFormat,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/> using multisampling.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="multiSampleCount">The multisample count.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilBuffer"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTargetCube">
            <summary>
            A RenderTargetCube frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/>.
            This class is also castable to <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.op_Implicit(SharpDX.Toolkit.Graphics.RenderTargetCube)~SharpDX.Direct3D11.RenderTargetView">
            <summary>
            RenderTargetView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> from a <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> from a <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTargetCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTargetCube"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.MipMapCount">
            <summary>
            A simple wrapper to specify number of mipmaps.
             Set to true to specify all mipmaps or sets an integer value >= 1
            to specify the exact number of mipmaps.
            </summary>
            <remarks>
            This structure use implicit conversion:
            <ul>
            <li>Set to <c>true</c> to specify all mipmaps.</li>
            <li>Set to <c>false</c> to specify a single mipmap.</li>
            <li>Set to an integer value >=1 to specify an exact count of mipmaps.</li>
            </ul>
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapCount.Auto">
            <summary>
            Automatic mipmap level based on texture size.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/> struct.
            </summary>
            <param name="allMipMaps">if set to <c>true</c> generates all mip maps.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/> struct.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MipMapCount.Count">
            <summary>
            Number of mipmaps.
            </summary>
            <remarks>
            Zero(0) means generate all mipmaps. One(1) generates a single mipmap... etc.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Implicit(SharpDX.Toolkit.Graphics.MipMapCount)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="mipMap">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Implicit(System.Boolean)~SharpDX.Toolkit.Graphics.MipMapCount">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>.
            </summary>
            <param name="mipMapAll">True to generate all mipmaps, false to use a single mipmap.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Implicit(SharpDX.Toolkit.Graphics.MipMapCount)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="mipMap">The value.</param>
            <returns>The count of mipmap (0 means all mipmaps).</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.MipMapCount.op_Implicit(System.Int32)~SharpDX.Toolkit.Graphics.MipMapCount">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SharpDX.Toolkit.Graphics.MipMapCount"/>.
            </summary>
            <param name="mipMapCount">True to generate all mipmaps, false to use a single mipmap.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.MSAALevel">
            <summary>
            Multisample count level.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MSAALevel.None">
            <summary>
            No multisample.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MSAALevel.X2">
            <summary>
            Multisample count of 2 pixels.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MSAALevel.X4">
            <summary>
            Multisample count of 4 pixels.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.MSAALevel.X8">
            <summary>
            Multisample count of 8 pixels.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture2D">
            <summary>
            A Texture 2D frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,``0[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> with a single level of mipmap.
            </summary>
            <typeparam name="T">Type of the pixel data to upload to the texture.</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="textureData">The texture data for a single mipmap and a single array slice. See remarks</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
            <remarks>
            Each value in textureData is a pixel in the destination texture.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.DataBox[],SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="textureData">Texture datas through an array of <see cref="T:SharpDX.DataBox"/> </param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.Image,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> directly from an <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 2D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 2D</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture2D.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 2D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 2D</exception>
            <returns>A texture</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTarget3D">
            <summary>
            A RenderTarget3D frontend to <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/>.
            This class is also castable to <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture3DBase">
            <summary>
            Abstract class frontend to <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture3DDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture3DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description3D">The description.</param>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture3DDescription,SharpDX.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture3DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description3D">The description.</param>
            <param name="dataRectangles">A variable-length parameters list containing data rectangles.</param>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture3D)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The device.</param>
            <param name="texture">The texture.</param>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3DBase.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.op_Implicit(SharpDX.Toolkit.Graphics.RenderTarget3D)~SharpDX.Direct3D11.RenderTargetView">
            <summary>
            RenderTargetView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture3DDescription)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> from a <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture3D)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> from a <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture3D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 3D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 3D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget3D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures">
            <summary>
            Features supported by a <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </summary>
            <remarks>
            This class gives also features for a particular format, using the operator this[dxgiFormat] on this structure.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.ObsoleteFormatToExcludes">
            <summary>
            <see cref="T:SharpDX.DXGI.Format"/> to exclude from the features test.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.Level">
            <summary>
            Features level of the current device.
            </summary>
            <msdn-id>ff476528</msdn-id>	
            <unmanaged>GetFeatureLevel</unmanaged>	
            <unmanaged-short>GetFeatureLevel</unmanaged-short>	
            <unmanaged>D3D_FEATURE_LEVEL ID3D11Device::GetFeatureLevel()</unmanaged>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.HasComputeShaders">
            <summary>
            Boolean indicating if this device supports compute shaders, unordered access on structured buffers and raw structured buffers.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.HasDoublePrecision">
            <summary>
            Boolean indicating if this device supports shaders double precision calculations.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.HasMultiThreadingConcurrentResources">
            <summary>
            Boolean indicating if this device supports concurrent resources in multithreading scenarios.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.HasDriverCommandLists">
            <summary>
            Boolean indicating if this device supports command lists in multithreading scenarios.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.GetMaximumMSAASampleCount(SharpDX.Direct3D11.Device,SharpDX.Toolkit.Graphics.PixelFormat)">
            <summary>
            Gets the maximum MSAA sample count for a particular <see cref="T:SharpDX.Toolkit.Graphics.PixelFormat"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="pixelFormat">The pixelFormat.</param>
            <returns>The maximum multisample count for this pixel pixelFormat</returns>
            <msdn-id>ff476499</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CheckMultisampleQualityLevels([In] DXGI_FORMAT Format,[In] unsigned int SampleCount,[Out] unsigned int* pNumQualityLevels)</unmanaged>
              <unmanaged-short>ID3D11Device::CheckMultisampleQualityLevels</unmanaged-short>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.Item(SharpDX.DXGI.Format)">
            <summary>
            Gets the <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat"/> for the specified <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
            <param name="dxgiFormat">The dxgi format.</param>
            <returns>Features for the specific format.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat">
            <summary>
            The features exposed for a particular format.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.Format">
            <summary>
            The <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.MSAALevelMax">
            <summary>
            Gets the maximum MSAA sample count for a particular <see cref="T:SharpDX.Toolkit.Graphics.PixelFormat"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.ComputeShaderFormatSupport">
            <summary>	
            Gets the unordered resource support options for a compute shader resource.	
            </summary>	
            <msdn-id>ff476135</msdn-id>	
            <unmanaged>D3D11_FORMAT_SUPPORT2</unmanaged>	
            <unmanaged-short>D3D11_FORMAT_SUPPORT2</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.FormatSupport">
            <summary>
            Support of a given format on the installed video device.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTarget1D">
            <summary>
            A RenderTarget1D frontend to <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/>.
            This class is also castable to <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture1DBase">
            <summary>
            Abstract class frontend to <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture1DDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture1DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description1D">The description.</param>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture1DDescription,SharpDX.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Toolkit.Graphics.Texture1DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description1D">The description.</param>
            <param name="dataBox">A variable-length parameters list containing data rectangles.</param>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.#ctor(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture1D)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The device.</param>
            <param name="texture">The texture.</param>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1DBase.op_Implicit(SharpDX.Toolkit.Graphics.Texture1DBase)~SharpDX.DXGI.Surface">
            <summary>
            <see cref="T:SharpDX.DXGI.Surface"/> casting operator.
            </summary>
            <param name="from">From the Texture1D.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.op_Implicit(SharpDX.Toolkit.Graphics.RenderTarget1D)~SharpDX.Direct3D11.RenderTargetView">
            <summary>
            RenderTargetView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture1DDescription)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> from a <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture1D)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> from a <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture1D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 1D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> class.</returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget1D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 1D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget1D"/> class.</returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture3D">
            <summary>
            A Texture 3D frontend to <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture3DDescription)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture3D)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture3D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,``0[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> with texture data for the firs map.
            </summary>
            <typeparam name="T">Type of the data to upload to the texture</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">The texture data, width * height * depth datas </param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.</returns>
            <remarks>
            The first dimension of mipMapTextures describes the number of is an array ot Texture3D Array
            </remarks>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.DataBox[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">DataBox used to fill texture data.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.
            </returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.Image,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> directly from an <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> class.</returns>
            <msdn-id>ff476522</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture3D** ppTexture3D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 3D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 3D</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture3D.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 3D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 3D</exception>
            <returns>A texture</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.Texture1D">
            <summary>
            A Texture 1D frontend to <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture1DDescription)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>		
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture1D)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture1D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.
            </returns>
            <msdn-id>ff476520</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,``0[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> with a single level of mipmap.
            </summary>
            <typeparam name="T">Type of the initial data to upload to the texture</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">Texture data. Size of must be equal to sizeof(Format) * width </param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_Texture1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (Texture1D Array), second dimension is the mipmap, the third is the texture data for a particular mipmap.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.Image,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> directly from an <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture1D** ppTexture1D)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateTexture1D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 1D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 1D</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.Texture1D.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a 1D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 1D</exception>
            <returns>A texture</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsDevice">
            <summary>
            This class is a frontend to <see cref="T:SharpDX.Direct3D11.Device"/> and <see cref="T:SharpDX.Direct3D11.DeviceContext"/>
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.Features">
            <summary>
            Gets the features supported by this <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.DefaultEffectPool">
            <summary>
            Default effect pool shared between all deferred GraphicsDevice instances.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.MainDevice">
            <summary>
            Gets the <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/> for immediate rendering.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.IsDebugMode">
            <summary>
            Gets whether this <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/> is running in debug.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.IsDeferred">
            <summary>
            Gets whether this <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/> is a deferred context.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.BlendStates">
            <summary>
            Gets the registered <see cref="T:SharpDX.Toolkit.Graphics.BlendState"/> for this graphics device.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.DepthStencilStates">
            <summary>
            Gets the registered <see cref="T:SharpDX.Toolkit.Graphics.DepthStencilState"/> for this graphics device.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.SamplerStates">
            <summary>
            Gets the registered <see cref="T:SharpDX.Toolkit.Graphics.SamplerState"/> for this graphics device.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.RasterizerStates">
            <summary>
            Gets the registered <see cref="T:SharpDX.Toolkit.Graphics.RasterizerState"/> for this graphics device.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.GraphicsDevice.Adapter">
            <summary>
            Gets the adapter associated with this device.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Clear(SharpDX.Color4)">
            <summary>
            Clears the default render target and depth stencil buffer attached to the current <see cref="P:SharpDX.Toolkit.Graphics.GraphicsDevice.Presenter"/>.
            </summary>
            <param name="color">Set this color value in all buffers.</param>
            <exception cref="T:System.InvalidOperationException">Cannot clear without a Presenter set on this instance</exception>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Clear(SharpDX.Toolkit.Graphics.ClearOptions,SharpDX.Color4,System.Single,System.Int32)">
            <summary>
            Clears the default render target and depth stencil buffer attached to the current <see cref="P:SharpDX.Toolkit.Graphics.GraphicsDevice.Presenter"/>.
            </summary>
            <param name="options">Options for clearing a buffer.</param>
            <param name="color">Set this four-component color value in the buffer.</param>
            <param name="depth">Set this depth value in the buffer.</param>
            <param name="stencil">Set this stencil value in the buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Clear(SharpDX.Toolkit.Graphics.ClearOptions,SharpDX.Vector4,System.Single,System.Int32)">
            <summary>
            Clears the default render target and depth stencil buffer attached to the current <see cref="P:SharpDX.Toolkit.Graphics.GraphicsDevice.Presenter"/>.
            </summary>
            <param name="options">Options for clearing a buffer.</param>
            <param name="color">Set this four-component color value in the buffer.</param>
            <param name="depth">Set this depth value in the buffer.</param>
            <param name="stencil">Set this stencil value in the buffer.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Clear(SharpDX.Direct3D11.RenderTargetView,SharpDX.Color4)">
            <summary>
            Clears a render target view by setting all the elements in a render target to one value.
            </summary>
            <param name="renderTargetView">The render target view.</param>
            <param name="colorRGBA">A 4-component array that represents the color to fill the render target with.</param>
            <remarks><p>Applications that wish to clear a render target to a specific integer value bit pattern should render a screen-aligned quad instead of using this method.  The reason for this is because this method accepts as input a floating point value, which may not have the same bit pattern as the original integer.</p><table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 11/10:</p> <p>Unlike Direct3D 9, the full extent of the resource view is always cleared. Viewport and scissor settings are not applied.</p> </td></tr> </table><p>?</p></remarks>
            <msdn-id>ff476388</msdn-id>
            <unmanaged>void ID3D11DeviceContext::ClearRenderTargetView([In] ID3D11RenderTargetView* pRenderTargetView,[In] const SHARPDX_COLOR4* ColorRGBA)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::ClearRenderTargetView</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Clear(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.DepthStencilClearFlags,System.Single,System.Byte)">
            <summary>	
            Clears the depth-stencil resource.
            </summary>	
            <param name="depthStencilView"><dd>  <p>Pointer to the depth stencil to be cleared.</p> </dd></param>	
            <param name="clearFlags"><dd>  <p>Identify the type of data to clear (see <strong><see cref="T:SharpDX.Direct3D11.DepthStencilClearFlags"/></strong>).</p> </dd></param>	
            <param name="depth"><dd>  <p>Clear the depth buffer with this value. This value will be clamped between 0 and 1.</p> </dd></param>	
            <param name="stencil"><dd>  <p>Clear the stencil buffer with this value.</p> </dd></param>	
            <remarks>	
            <table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 11/10:</p> <p>Unlike Direct3D 9, the full extent of the resource view is always cleared. Viewport and scissor settings are not applied.</p> </td></tr> </table><p>?</p>	
            </remarks>	
            <msdn-id>ff476387</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::ClearDepthStencilView([In] ID3D11DepthStencilView* pDepthStencilView,[In] D3D11_CLEAR_FLAG ClearFlags,[In] float Depth,[In] unsigned char Stencil)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::ClearDepthStencilView</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Clear(SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Int4)">
            <summary>	
            Clears an unordered access resource with bit-precise values.	
            </summary>	
            <param name="view">The buffer to clear.</param>	
            <param name="value">The value used to clear.</param>	
            <remarks>	
            <p>This API copies the lower ni bits from each array element i to the corresponding channel, where ni is the number of bits in  the ith channel of the resource format (for example, R8G8B8_FLOAT has 8 bits for the first 3 channels). This works on any UAV with no format conversion.  For a raw or structured buffer view, only the first array element value is used.</p>	
            </remarks>	
            <msdn-id>ff476391</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::ClearUnorderedAccessViewUint([In] ID3D11UnorderedAccessView* pUnorderedAccessView,[In] const unsigned int* Values)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::ClearUnorderedAccessViewUint</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Clear(SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Vector4)">
            <summary>	
            Clears an unordered access resource with a float value.
            </summary>	
            <param name="view">The buffer to clear.</param>	
            <param name="value">The value used to clear.</param>	
            <remarks>	
            <p>This API works on FLOAT, UNORM, and SNORM unordered access views (UAVs), with format conversion from FLOAT to *NORM where appropriate. On other UAVs, the operation is invalid and the call will not reach the driver.</p>	
            </remarks>	
            <msdn-id>ff476390</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::ClearUnorderedAccessViewFloat([In] ID3D11UnorderedAccessView* pUnorderedAccessView,[In] const float* Values)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::ClearUnorderedAccessViewFloat</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Copy(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)">
            <summary>
            Copies the content of this resource to another <see cref="T:SharpDX.Toolkit.Graphics.GraphicsResource"/>.
            </summary>
            <param name="fromResource">The resource to copy from.</param>
            <param name="toResource">The resource to copy to.</param>
            <remarks>See the unmanaged documentation for usage and restrictions.</remarks>
            <msdn-id>ff476392</msdn-id>
            <unmanaged>void ID3D11DeviceContext::CopyResource([In] ID3D11Resource* pDstResource,[In] ID3D11Resource* pSrcResource)</unmanaged>
            <unmanaged-short>ID3D11DeviceContext::CopyResource</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Copy(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Copy a region from a source resource to a destination resource.	
            </summary>	
            <remarks>	
            The source box must be within the size of the source resource. The destination offsets, (x, y, and z) allow the source box to be offset when writing into the destination resource; however, the dimensions of the source box and the offsets must be within the size of the resource. If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels. {{D3D11CalcSubresource}} is a helper function for calculating subresource indexes. CopySubresourceRegion performs the copy on the GPU (similar to a memcpy by the CPU). As a consequence, the source and destination resources:  Must be different subresources (although they can be from the same resource). Must be the same type. Must have compatible DXGI formats (identical or from the same type group). For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture since both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. May not be currently mapped.  CopySubresourceRegion only supports copy; it does not support any stretch, color key, blend, or format conversions. An application that needs to copy an entire resource should use <see cref="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)"/> instead. CopySubresourceRegion is an asynchronous call which may be added to the command-buffer queue, this attempts to remove pipeline stalls that may occur when copying data. See performance considerations for more details. Note??If you use CopySubresourceRegion with a depth-stencil buffer or a multisampled resource, you must copy the whole subresource. In this situation, you must pass 0 to the DstX, DstY, and DstZ parameters and NULL to the pSrcBox parameter. In addition, source and destination resources, which are represented by the pSrcResource and pDstResource parameters, should have identical sample count values. Example The following code snippet copies a box (located at (120,100),(200,220)) from a source texture into a reqion (10,20),(90,140) in a destination texture. 	
            <code> D3D11_BOX sourceRegion;	
            sourceRegion.left = 120;	
            sourceRegion.right = 200;	
            sourceRegion.top = 100;	
            sourceRegion.bottom = 220;	
            sourceRegion.front = 0;	
            sourceRegion.back = 1; pd3dDeviceContext-&gt;CopySubresourceRegion( pDestTexture, 0, 10, 20, 0, pSourceTexture, 0, &amp;sourceRegion ); </code>	
            	
             Notice, that for a 2D texture, front and back are set to 0 and 1 respectively. 	
            </remarks>	
            <param name="source">A reference to the source resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="sourceSubresource">Source subresource index. </param>
            <param name="destination">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="destinationSubResource">Destination subresource index. </param>
            <param name="dstX">The x-coordinate of the upper left corner of the destination region. </param>
            <param name="dstY">The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero. </param>
            <param name="dstZ">The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero. </param>
            <msdn-id>ff476394</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::CopySubresourceRegion([In] ID3D11Resource* pDstResource,[In] unsigned int DstSubresource,[In] unsigned int DstX,[In] unsigned int DstY,[In] unsigned int DstZ,[In] ID3D11Resource* pSrcResource,[In] unsigned int SrcSubresource,[In, Optional] const D3D11_BOX* pSrcBox)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::CopySubresourceRegion</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Copy(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.ResourceRegion,SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Copy a region from a source resource to a destination resource.	
            </summary>	
            <remarks>	
            The source box must be within the size of the source resource. The destination offsets, (x, y, and z) allow the source box to be offset when writing into the destination resource; however, the dimensions of the source box and the offsets must be within the size of the resource. If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels. {{D3D11CalcSubresource}} is a helper function for calculating subresource indexes. CopySubresourceRegion performs the copy on the GPU (similar to a memcpy by the CPU). As a consequence, the source and destination resources:  Must be different subresources (although they can be from the same resource). Must be the same type. Must have compatible DXGI formats (identical or from the same type group). For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture since both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. May not be currently mapped.  CopySubresourceRegion only supports copy; it does not support any stretch, color key, blend, or format conversions. An application that needs to copy an entire resource should use <see cref="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)"/> instead. CopySubresourceRegion is an asynchronous call which may be added to the command-buffer queue, this attempts to remove pipeline stalls that may occur when copying data. See performance considerations for more details. Note??If you use CopySubresourceRegion with a depth-stencil buffer or a multisampled resource, you must copy the whole subresource. In this situation, you must pass 0 to the DstX, DstY, and DstZ parameters and NULL to the pSrcBox parameter. In addition, source and destination resources, which are represented by the pSrcResource and pDstResource parameters, should have identical sample count values. Example The following code snippet copies a box (located at (120,100),(200,220)) from a source texture into a reqion (10,20),(90,140) in a destination texture. 	
            <code> D3D11_BOX sourceRegion;	
            sourceRegion.left = 120;	
            sourceRegion.right = 200;	
            sourceRegion.top = 100;	
            sourceRegion.bottom = 220;	
            sourceRegion.front = 0;	
            sourceRegion.back = 1; pd3dDeviceContext-&gt;CopySubresourceRegion( pDestTexture, 0, 10, 20, 0, pSourceTexture, 0, &amp;sourceRegion ); </code>	
            	
             Notice, that for a 2D texture, front and back are set to 0 and 1 respectively. 	
            </remarks>	
            <param name="source">A reference to the source resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="sourceSubresource">Source subresource index. </param>
            <param name="sourceRegion">A reference to a 3D box (see <see cref="T:SharpDX.Direct3D11.ResourceRegion"/>) that defines the source subresources that can be copied. If NULL, the entire source subresource is copied. The box must fit within the source resource. </param>
            <param name="destination">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="destinationSubResource">Destination subresource index. </param>
            <param name="dstX">The x-coordinate of the upper left corner of the destination region. </param>
            <param name="dstY">The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero. </param>
            <param name="dstZ">The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero. </param>
            <msdn-id>ff476394</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::CopySubresourceRegion([In] ID3D11Resource* pDstResource,[In] unsigned int DstSubresource,[In] unsigned int DstX,[In] unsigned int DstY,[In] unsigned int DstZ,[In] ID3D11Resource* pSrcResource,[In] unsigned int SrcSubresource,[In, Optional] const D3D11_BOX* pSrcBox)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::CopySubresourceRegion</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Copy(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,SharpDX.DXGI.Format)">
            <summary>	
            Copy a multisampled resource into a non-multisampled resource.	
            </summary>	
            <remarks>	
            This API is most useful when re-using the resulting rendertarget of one render pass as an input to a second render pass. The source and destination resources must be the same resource type and have the same dimensions. In addition, they must have compatible formats. There are three scenarios for this:  ScenarioRequirements Source and destination are prestructured and typedBoth the source and destination must have identical formats and that format must be specified in the Format parameter. One resource is prestructured and typed and the other is prestructured and typelessThe typed resource must have a format that is compatible with the typeless resource (i.e. the typed resource is DXGI_FORMAT_R32_FLOAT and the typeless resource is DXGI_FORMAT_R32_TYPELESS). The format of the typed resource must be specified in the Format parameter. Source and destination are prestructured and typelessBoth the source and desintation must have the same typeless format (i.e. both must have DXGI_FORMAT_R32_TYPELESS), and the Format parameter must specify a format that is compatible with the source and destination (i.e. if both are DXGI_FORMAT_R32_TYPELESS then DXGI_FORMAT_R32_FLOAT could be specified in the Format parameter). For example, given the DXGI_FORMAT_R16G16B16A16_TYPELESS format:  The source (or dest) format could be DXGI_FORMAT_R16G16B16A16_UNORM The dest (or source) format could be DXGI_FORMAT_R16G16B16A16_FLOAT    ? 	
            </remarks>	
            <param name="source">Source resource. Must be multisampled. </param>
            <param name="sourceSubresource">&gt;The source subresource of the source resource. </param>
            <param name="destination">Destination resource. Must be a created with the <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> flag and be single-sampled. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="destinationSubresource">A zero-based index, that identifies the destination subresource. Use {{D3D11CalcSubresource}} to calculate the index. </param>
            <param name="format">A <see cref="T:SharpDX.DXGI.Format"/> that indicates how the multisampled resource will be resolved to a single-sampled resource.  See remarks. </param>
            <unmanaged>void ID3D11DeviceContext::ResolveSubresource([In] ID3D11Resource* pDstResource,[In] int DstSubresource,[In] ID3D11Resource* pSrcResource,[In] int SrcSubresource,[In] DXGI_FORMAT Format)</unmanaged>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.CopyCount(SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            <p>Copies data from a buffer holding variable length data.</p>	
            </summary>	
            <param name="sourceView"><dd>  <p>Pointer to an <strong><see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/></strong> of a Structured Buffer resource created with either  <strong><see cref="F:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags.Append"/></strong> or <strong><see cref="F:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags.Counter"/></strong> specified  when the UAV was created.   These types of resources have hidden counters tracking "how many" records have  been written.</p> </dd></param>	
            <param name="destinationBuffer"><dd>  <p>Pointer to <strong><see cref="T:SharpDX.Direct3D11.Buffer"/></strong>.  This can be any buffer resource that other copy commands,  such as <strong><see cref="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)"/></strong> or <strong><see cref="M:SharpDX.Direct3D11.DeviceContext.CopySubresourceRegion_(SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})"/></strong>, are able to write to.</p> </dd></param>	
            <param name="offsetInBytes"><dd>  <p>Offset from the start of <em>pDstBuffer</em> to write 32-bit UINT structure (vertex) count from <em>pSrcView</em>.</p> </dd></param>	
            <msdn-id>ff476393</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::CopyStructureCount([In] ID3D11Buffer* pDstBuffer,[In] unsigned int DstAlignedByteOffset,[In] ID3D11UnorderedAccessView* pSrcView)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::CopyStructureCount</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.ClearState">
            <summary>	
            <p>Restore all default settings.</p>	
            </summary>	
            <remarks>	
            <p>This method resets any device context to the default settings. This sets all input/output resource slots, shaders, input layouts, predications, scissor rectangles, depth-stencil state, rasterizer state, blend state, sampler state, and viewports to <strong><c>null</c></strong>. The primitive topology is set to UNDEFINED.</p><p>For a scenario where you would like to clear a list of commands recorded so far, call <strong><see cref="M:SharpDX.Direct3D11.DeviceContext.FinishCommandListInternal(SharpDX.Bool,SharpDX.Direct3D11.CommandList@)"/></strong> and throw away the resulting <strong><see cref="T:SharpDX.Direct3D11.CommandList"/></strong>.</p>	
            </remarks>	
            <msdn-id>ff476389</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::ClearState()</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::ClearState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawIndexed(SharpDX.Toolkit.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32)">
            <summary>	
            <p>Draw indexed, non-instanced primitives.</p>	
            </summary>
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="indexCount"><dd>  <p>Number of indices to draw.</p> </dd></param>	
            <param name="startIndexLocation"><dd>  <p>The location of the first index read by the GPU from the index buffer.</p> </dd></param>	
            <param name="baseVertexLocation"><dd>  <p>A value added to each index before reading a vertex from the vertex buffer.</p> </dd></param>	
            <remarks>	
            <p>A draw API submits work to the rendering pipeline.</p><p>If the sum of both indices is negative, the result of the function call is undefined.</p>	
            </remarks>	
            <msdn-id>ff476409</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::DrawIndexed([In] unsigned int IndexCount,[In] unsigned int StartIndexLocation,[In] int BaseVertexLocation)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::DrawIndexed</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Draw(SharpDX.Toolkit.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <summary>	
            <p>Draw non-indexed, non-instanced primitives.</p>	
            </summary>
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="vertexCount"><dd>  <p>Number of vertices to draw.</p> </dd></param>	
            <param name="startVertexLocation"><dd>  <p>Index of the first vertex, which is usually an offset in a vertex buffer; it could also be used as the first vertex id generated for a shader parameter marked with the <strong>SV_TargetId</strong> system-value semantic.</p> </dd></param>	
            <remarks>	
            <p>A draw API submits work to the rendering pipeline.</p><p>The vertex data for a draw call normally comes from a vertex buffer that is bound to the pipeline. However, you could also provide the vertex data from a shader that has vertex data marked with the <strong>SV_VertexId</strong> system-value semantic.</p>	
            </remarks>	
            <msdn-id>ff476407</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::Draw([In] unsigned int VertexCount,[In] unsigned int StartVertexLocation)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Draw</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawIndexedInstanced(SharpDX.Toolkit.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            <p>Draw indexed, instanced primitives.</p>	
            </summary>	
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="indexCountPerInstance"><dd>  <p>Number of indices read from the index buffer for each instance.</p> </dd></param>	
            <param name="instanceCount"><dd>  <p>Number of instances to draw.</p> </dd></param>	
            <param name="startIndexLocation"><dd>  <p>The location of the first index read by the GPU from the index buffer.</p> </dd></param>	
            <param name="baseVertexLocation"><dd>  <p>A value added to each index before reading a vertex from the vertex buffer.</p> </dd></param>	
            <param name="startInstanceLocation"><dd>  <p>A value added to each index before reading per-instance data from a vertex buffer.</p> </dd></param>	
            <remarks>	
            <p>A draw API submits work to the rendering pipeline.</p><p>Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be  to draw the same object with different positions and colors. Indexing requires multiple vertex buffers: at least one for per-vertex data  and a second buffer for per-instance data.</p>	
            </remarks>	
            <msdn-id>ff476410</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::DrawIndexedInstanced([In] unsigned int IndexCountPerInstance,[In] unsigned int InstanceCount,[In] unsigned int StartIndexLocation,[In] int BaseVertexLocation,[In] unsigned int StartInstanceLocation)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::DrawIndexedInstanced</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawInstanced(SharpDX.Toolkit.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            <p>Draw non-indexed, instanced primitives.</p>	
            </summary>	
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="vertexCountPerInstance"><dd>  <p>Number of vertices to draw.</p> </dd></param>	
            <param name="instanceCount"><dd>  <p>Number of instances to draw.</p> </dd></param>	
            <param name="startVertexLocation"><dd>  <p>Index of the first vertex.</p> </dd></param>	
            <param name="startInstanceLocation"><dd>  <p>A value added to each index before reading per-instance data from a vertex buffer.</p> </dd></param>	
            <remarks>	
            <p>A draw API submits work to the rendering pipeline.</p><p>Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be  to draw the same object with different positions and colors.</p><p>The vertex data for an instanced draw call normally comes from a vertex buffer that is bound to the pipeline.  However, you could also provide the vertex data from a shader that has instanced data identified with a system-value semantic (SV_InstanceID).</p>	
            </remarks>	
            <msdn-id>ff476412</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::DrawInstanced([In] unsigned int VertexCountPerInstance,[In] unsigned int InstanceCount,[In] unsigned int StartVertexLocation,[In] unsigned int StartInstanceLocation)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::DrawInstanced</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawAuto(SharpDX.Toolkit.Graphics.PrimitiveType)">
            <summary>	
            <p>Draw geometry of an unknown size.</p>	
            </summary>	
            <param name="primitiveType">Type of the primitive to draw.</param>
            <remarks>	
            <p>A draw API submits work to the rendering pipeline. This API submits work of an unknown size that was processed by the input assembler, vertex shader, and stream-output stages;  the work may or may not have gone through the geometry-shader stage.</p><p>After data has been streamed out to stream-output stage buffers, those buffers can be again bound to the Input Assembler stage at input slot 0 and DrawAuto will draw them without the application needing to know the amount of data that was written to the buffers. A measurement of the amount of data written to the SO stage buffers is maintained internally when the data is streamed out. This means that the CPU does not need to fetch the measurement before re-binding the data that was streamed as input data. Although this amount is tracked internally, it is still the responsibility of applications to use input layouts to describe the format of the data in the SO stage buffers so that the layouts are available when the buffers are again bound to the input assembler.</p><p>The following diagram shows the DrawAuto process.</p><p></p><p>Calling DrawAuto does not change the state of the streaming-output buffers that were bound again as inputs.</p><p>DrawAuto only works when drawing with one input buffer bound as an input to the IA stage at slot 0. Applications must create the SO buffer resource with both binding flags, <strong><see cref="F:SharpDX.Direct3D11.BindFlags.VertexBuffer"/></strong> and <strong><see cref="F:SharpDX.Direct3D11.BindFlags.StreamOutput"/></strong>.</p><p>This API does not support indexing or instancing.</p><p>If an application needs to retrieve the size of the streaming-output buffer, it can query for statistics on streaming output by using <strong><see cref="F:SharpDX.Direct3D11.QueryType.StreamOutputStatistics"/></strong>.</p>	
            </remarks>	
            <msdn-id>ff476408</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::DrawAuto()</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::DrawAuto</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawIndexedInstanced(SharpDX.Toolkit.Graphics.PrimitiveType,SharpDX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            <p>Draw indexed, instanced, GPU-generated primitives.</p>	
            </summary>	
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="argumentsBuffer"><dd>  <p>A reference to an <strong><see cref="T:SharpDX.Direct3D11.Buffer"/></strong>, which is a buffer containing the GPU generated primitives.</p> </dd></param>	
            <param name="alignedByteOffsetForArgs"><dd>  <p>Offset in <em>pBufferForArgs</em> to the start of the GPU generated primitives.</p> </dd></param>	
            <remarks>	
            <p>When an application creates a buffer that is associated with the <strong><see cref="T:SharpDX.Direct3D11.Buffer"/></strong> interface that  <em>pBufferForArgs</em> points to, the application must set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.DrawindirectArgs"/></strong> flag in the <strong>MiscFlags</strong> member of the <strong><see cref="T:SharpDX.Direct3D11.BufferDescription"/></strong> structure that describes the buffer. To create the buffer, the application calls the <strong><see cref="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.DataBox},SharpDX.Direct3D11.Buffer)"/></strong> method and in this call passes a reference to <strong><see cref="T:SharpDX.Direct3D11.BufferDescription"/></strong> in the <em>pDesc</em> parameter.</p>	
            </remarks>	
            <msdn-id>ff476411</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::DrawIndexedInstancedIndirect([In] ID3D11Buffer* pBufferForArgs,[In] unsigned int AlignedByteOffsetForArgs)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::DrawIndexedInstancedIndirect</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawInstanced(SharpDX.Toolkit.Graphics.PrimitiveType,SharpDX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            <p>Draw instanced, GPU-generated primitives.</p>	
            </summary>	
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="argumentsBuffer"><dd>  <p>A reference to an <strong><see cref="T:SharpDX.Direct3D11.Buffer"/></strong>, which is a buffer containing the GPU generated primitives.</p> </dd></param>	
            <param name="alignedByteOffsetForArgs"><dd>  <p>Offset in <em>pBufferForArgs</em> to the start of the GPU generated primitives.</p> </dd></param>	
            <remarks>	
            <p>When an application creates a buffer that is associated with the <strong><see cref="T:SharpDX.Direct3D11.Buffer"/></strong> interface that  <em>pBufferForArgs</em> points to, the application must set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.DrawindirectArgs"/></strong> flag in the <strong>MiscFlags</strong> member of the <strong><see cref="T:SharpDX.Direct3D11.BufferDescription"/></strong> structure that describes the buffer. To create the buffer, the application calls the <strong><see cref="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.DataBox},SharpDX.Direct3D11.Buffer)"/></strong> method and in this call passes a reference to <strong><see cref="T:SharpDX.Direct3D11.BufferDescription"/></strong> in the <em>pDesc</em> parameter.</p>	
            </remarks>	
            <msdn-id>ff476413</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::DrawInstancedIndirect([In] ID3D11Buffer* pBufferForArgs,[In] unsigned int AlignedByteOffsetForArgs)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::DrawInstancedIndirect</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawQuad">
            <summary>
            Draws a fullscreen quad. An effect with at least a pixel shader (with the expected signature - float2:TEXCOORD) must have been applied before using this method.
            </summary>
            <seealso cref="T:SharpDX.Toolkit.Graphics.PrimitiveQuad"/>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawQuad(SharpDX.Matrix)">
            <summary>
            Draws a fullscreen quad. An effect with at least a pixel shader (with the expected signature - float2:TEXCOORD) must have been applied before using this method.
            </summary>
            <param name="tranform">The tranform.</param>
            <seealso cref="T:SharpDX.Toolkit.Graphics.PrimitiveQuad"/>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawQuad(SharpDX.Toolkit.Graphics.Effect)">
            <summary>
            Draws a fullscreen quad with the specified effect (with the expected signature - float2:TEXCOORD)
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawQuad(SharpDX.Toolkit.Graphics.Effect,SharpDX.Matrix)">
            <summary>
            Draws a fullscreen quad with the specified effect (with the expected signature - float2:TEXCOORD)
            </summary>
            <param name="effect">The effect.</param>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawQuad(SharpDX.Toolkit.Graphics.Effect,SharpDX.Matrix@)">
            <summary>
            Draws a fullscreen quad with the specified effect (with the expected signature - float2:TEXCOORD)
            </summary>
            <param name="effect">The effect.</param>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawQuad(SharpDX.Toolkit.Graphics.EffectPass)">
            <summary>
            Draws a fullscreen quad with the specified effect pass (with the expected signature - float2:TEXCOORD)
            </summary>
            <param name="effectPass">The effect pass.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawQuad(SharpDX.Toolkit.Graphics.EffectPass,SharpDX.Matrix)">
            <summary>
            Draws a fullscreen quad with the specified effect pass (with the expected signature - float2:TEXCOORD)
            </summary>
            <param name="effectPass">The effect pass.</param>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.DrawQuad(SharpDX.Toolkit.Graphics.EffectPass,SharpDX.Matrix@)">
            <summary>
            Draws a fullscreen quad with the specified effect pass (with the expected signature - float2:TEXCOORD)
            </summary>
            <param name="effectPass">The effect pass.</param>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Dispatch(System.Int32,System.Int32,System.Int32)">
            <summary>	
            <p>Execute a command list from a thread group.</p>	
            </summary>	
            <param name="threadGroupCountX"><dd>  <p>The number of groups dispatched in the x direction. <em>ThreadGroupCountX</em> must be less than <see cref="F:SharpDX.Direct3D11.ComputeShaderStage.DispatchMaximumThreadGroupsPerDimension"/> (65535).</p> </dd></param>	
            <param name="threadGroupCountY"><dd>  <p>The number of groups dispatched in the y direction. <em>ThreadGroupCountY</em> must be less than <see cref="F:SharpDX.Direct3D11.ComputeShaderStage.DispatchMaximumThreadGroupsPerDimension"/> (65535).</p> </dd></param>	
            <param name="threadGroupCountZ"><dd>  <p>The number of groups dispatched in the z direction.  <em>ThreadGroupCountZ</em> must be less than <see cref="F:SharpDX.Direct3D11.ComputeShaderStage.DispatchMaximumThreadGroupsPerDimension"/> (65535).  In feature level 10 the value for <em>ThreadGroupCountZ</em> must be 1.</p> </dd></param>	
            <remarks>	
            <p>You call the <strong>Dispatch</strong> method to execute commands in a compute shader. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector  given by (x,y,z).</p><p>In the following illustration, assume a thread group with 50 threads where the size of the group is given by (5,5,2). A single thread is identified from a  thread group with 50 threads in it, using the vector (4,1,1).</p><p></p><p>The following illustration shows the relationship between the parameters passed to <strong><see cref="M:SharpDX.Direct3D11.DeviceContext.Dispatch(System.Int32,System.Int32,System.Int32)"/></strong>, Dispatch(5,3,2), the values specified in the numthreads attribute, numthreads(10,8,3), and values that will passed to the compute shader for the thread-related system values 	
            (SV_GroupIndex,SV_DispatchThreadID,SV_GroupThreadID,SV_GroupID).</p><p></p>	
            </remarks>	
            <msdn-id>ff476405</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::Dispatch([In] unsigned int ThreadGroupCountX,[In] unsigned int ThreadGroupCountY,[In] unsigned int ThreadGroupCountZ)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Dispatch</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Dispatch(SharpDX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            <p>Execute a command list over one or more thread groups.</p>	
            </summary>	
            <param name="argumentsBuffer"><dd>  <p>A reference to an <strong><see cref="T:SharpDX.Direct3D11.Buffer"/></strong>, which must be loaded with data that matches the argument list for <strong><see cref="M:SharpDX.Direct3D11.DeviceContext.Dispatch(System.Int32,System.Int32,System.Int32)"/></strong>.</p> </dd></param>	
            <param name="alignedByteOffsetForArgs"><dd>  <p>A byte-aligned offset between the start of the buffer and the arguments.</p> </dd></param>	
            <remarks>	
            <p>You call the <strong>DispatchIndirect</strong> method to execute commands in a compute shader.</p><p>When an application creates a buffer that is associated with the <strong><see cref="T:SharpDX.Direct3D11.Buffer"/></strong> interface that  <em>pBufferForArgs</em> points to, the application must set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.DrawindirectArgs"/></strong> flag in the <strong>MiscFlags</strong> member of the <strong><see cref="T:SharpDX.Direct3D11.BufferDescription"/></strong> structure that describes the buffer. To create the buffer, the application calls the <strong><see cref="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.DataBox},SharpDX.Direct3D11.Buffer)"/></strong> method and in this call passes a reference to <strong><see cref="T:SharpDX.Direct3D11.BufferDescription"/></strong> in the <em>pDesc</em> parameter.</p>	
            </remarks>	
            <msdn-id>ff476406</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::DispatchIndirect([In] ID3D11Buffer* pBufferForArgs,[In] unsigned int AlignedByteOffsetForArgs)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::DispatchIndirect</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Flush">
            <summary>	
            <p>Sends queued-up commands in the command buffer to the graphics processing unit (GPU).</p>	
            </summary>	
            <remarks>	
            <p>Most applications don't need to call this method. If an application calls this method when not necessary, it incurs a performance penalty.  Each call to <strong>Flush</strong> incurs a significant amount of overhead.</p><p>When Microsoft Direct3D state-setting, present, or draw commands are called by an application, those commands are queued into an internal command buffer.  <strong>Flush</strong> sends those commands to the GPU for processing. Typically, the Direct3D runtime sends these commands to the GPU automatically whenever the runtime determines that  they need to be sent, such as when the command buffer is full or when an application maps a resource. <strong>Flush</strong> sends the commands manually.</p><p>We recommend that you use <strong>Flush</strong> when the CPU waits for an arbitrary amount of time (such as when  you call the <strong>Sleep</strong> function).</p><p>Because <strong>Flush</strong> operates asynchronously,  it can return either before or after the GPU finishes executing the queued graphics commands. However, the graphics commands eventually always complete. You can call the <strong><see cref="M:SharpDX.Direct3D11.Device.CreateQuery(SharpDX.Direct3D11.QueryDescription,SharpDX.Direct3D11.Query)"/></strong> method with the <strong><see cref="F:SharpDX.Direct3D11.QueryType.Event"/></strong> value to create an event query; you can then use that event query in a call to the <strong><see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/></strong> method to determine when the GPU is finished processing the graphics commands.	
            </p><p>Microsoft Direct3D?11 defers the destruction of objects. Therefore, an application can't rely upon objects immediately being destroyed. By calling <strong>Flush</strong>, you destroy any  objects whose destruction was deferred.  If an application requires synchronous destruction of an object, we recommend that the application release all its references, call <strong><see cref="M:SharpDX.Direct3D11.DeviceContext.ClearState"/></strong>, and then call <strong>Flush</strong>.</p>Deferred Destruction Issues with Flip Presentation Swap Chains<p>Direct3D?11 defers the destruction of objects like views and resources until it can efficiently destroy them. This deferred destruction can cause problems with flip presentation model swap chains. Flip presentation model swap chains have the <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong> flag set. When you create a flip presentation model swap chain, you can associate only one swap chain at a time with an <strong><see cref="T:System.IntPtr"/></strong>, <strong>IWindow</strong>, or composition surface. If an application attempts to destroy a flip presentation model swap chain and replace it with another swap chain, the original swap chain is not destroyed when the application immediately frees all of the original swap chain's references.</p><p>Most applications typically use the <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> method for the majority of scenarios where they replace new swap chain buffers for old swap chain buffers. However, if an application must actually destroy an old swap chain and create a new swap chain, the application must force the destruction of all objects that the application freed. To force the destruction, call <strong><see cref="M:SharpDX.Direct3D11.DeviceContext.ClearState"/></strong> (or otherwise ensure no views are bound to pipeline state), and then call <strong>Flush</strong> on the immediate context. You must force destruction before you call <strong>IDXGIFactory2::CreateSwapChainForHwnd</strong>, <strong>IDXGIFactory2::CreateSwapChainForImmersiveWindow</strong>, or <strong>IDXGIFactory2::CreateSwapChainForCompositionSurface</strong> again to create a new swap chain.</p>	
            </remarks>	
            <msdn-id>ff476425</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::Flush()</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::Flush</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.New(SharpDX.Direct3D11.Device)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/> from an existing <see cref="T:SharpDX.Direct3D11.Device"/>.
            </summary>
            <param name="existingDevice">An existing device.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.New(SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[])">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/> using <see cref="F:SharpDX.Direct3D.DriverType.Hardware"/>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="featureLevels">The feature levels.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.New(SharpDX.Direct3D.DriverType,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[])">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="flags">The flags.</param>
            <param name="featureLevels">The feature levels.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.New(SharpDX.Toolkit.Graphics.GraphicsAdapter,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[])">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </summary>
            <param name="adapter">The graphics adapter to use.</param>
            <param name="flags">The flags.</param>
            <param name="featureLevels">The feature levels.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.NewDeferred">
            <summary>
            Creates a new deferred <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.
            </summary>
            <returns>A deferred <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetBlendState(SharpDX.Toolkit.Graphics.BlendState)">
            <summary>	
            <p>Set the blend state of the output-merger stage.</p>	
            </summary>	
            <param name="blendState"><dd>  <p>Pointer to a blend-state interface (see <strong><see cref="T:SharpDX.Direct3D11.BlendState"/></strong>). Passing in <strong><c>null</c></strong> implies a default blend state. See remarks for further details.</p> </dd></param>	
            <remarks>	
            <p>Blend state is used by the output-merger stage to determine how to blend together two pixel values. The two values are commonly the current pixel value and the pixel value already in the output render target. Use the <strong>blend operation</strong> to control where the two pixel values come from and how they are mathematically combined.</p><p>To create a blend-state interface, call <strong><see cref="M:SharpDX.Direct3D11.Device.CreateBlendState(SharpDX.Direct3D11.BlendStateDescription@,SharpDX.Direct3D11.BlendState)"/></strong>.</p><p>Passing in <strong><c>null</c></strong> for the blend-state interface indicates to the runtime to set a default blending state.  The following table indicates the default blending parameters.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>AlphaToCoverageEnable</td><td><strong><see cref="F:SharpDX.Result.False"/></strong></td></tr> <tr><td>BlendEnable</td><td><strong><see cref="F:SharpDX.Result.False"/></strong>[8]</td></tr> <tr><td>SrcBlend</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DstBlend</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOp</td><td><see cref="F:SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>SrcBlendAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DstBlendAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOpAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTargetWriteMask[8]</td><td><see cref="F:SharpDX.Direct3D11.ColorWriteMaskFlags.All"/>[8]</td></tr> </table><p>?</p><p>A sample mask determines which samples get updated in all the active render targets. The mapping of bits in a sample mask to samples in a multisample render target is the responsibility of an individual application. A sample mask is always applied; it is independent of whether multisampling is enabled, and does not depend on whether an application uses multisample render targets.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p>	
            </remarks>	
            <msdn-id>ff476462</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::OMSetBlendState([In, Optional] ID3D11BlendState* pBlendState,[In, Optional] const SHARPDX_COLOR4* BlendFactor,[In] unsigned int SampleMask)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::OMSetBlendState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetBlendState(SharpDX.Toolkit.Graphics.BlendState,SharpDX.Color4,System.Int32)">
            <summary>	
            <p>Set the blend state of the output-merger stage.</p>	
            </summary>	
            <param name="blendState"><dd>  <p>Pointer to a blend-state interface (see <strong><see cref="T:SharpDX.Direct3D11.BlendState"/></strong>). Passing in <strong><c>null</c></strong> implies a default blend state. See remarks for further details.</p> </dd></param>
            <param name="blendFactor"><dd>  <p>Array of blend factors, one for each RGBA component. This requires a blend state object that specifies the <strong><see cref="F:SharpDX.Direct3D11.BlendOption.BlendFactor"/></strong> option.</p> </dd></param>	
            <param name="multiSampleMask"><dd>  <p>32-bit sample coverage. The default value is 0xffffffff. See remarks.</p> </dd></param>	
            <remarks>	
            <p>Blend state is used by the output-merger stage to determine how to blend together two pixel values. The two values are commonly the current pixel value and the pixel value already in the output render target. Use the <strong>blend operation</strong> to control where the two pixel values come from and how they are mathematically combined.</p><p>To create a blend-state interface, call <strong><see cref="M:SharpDX.Direct3D11.Device.CreateBlendState(SharpDX.Direct3D11.BlendStateDescription@,SharpDX.Direct3D11.BlendState)"/></strong>.</p><p>Passing in <strong><c>null</c></strong> for the blend-state interface indicates to the runtime to set a default blending state.  The following table indicates the default blending parameters.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>AlphaToCoverageEnable</td><td><strong><see cref="F:SharpDX.Result.False"/></strong></td></tr> <tr><td>BlendEnable</td><td><strong><see cref="F:SharpDX.Result.False"/></strong>[8]</td></tr> <tr><td>SrcBlend</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DstBlend</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOp</td><td><see cref="F:SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>SrcBlendAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DstBlendAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOpAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTargetWriteMask[8]</td><td><see cref="F:SharpDX.Direct3D11.ColorWriteMaskFlags.All"/>[8]</td></tr> </table><p>?</p><p>A sample mask determines which samples get updated in all the active render targets. The mapping of bits in a sample mask to samples in a multisample render target is the responsibility of an individual application. A sample mask is always applied; it is independent of whether multisampling is enabled, and does not depend on whether an application uses multisample render targets.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p>	
            </remarks>	
            <msdn-id>ff476462</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::OMSetBlendState([In, Optional] ID3D11BlendState* pBlendState,[In, Optional] const SHARPDX_COLOR4* BlendFactor,[In] unsigned int SampleMask)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::OMSetBlendState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetBlendState(SharpDX.Toolkit.Graphics.BlendState,SharpDX.Color4,System.UInt32)">
            <summary>	
            <p>Set the blend state of the output-merger stage.</p>	
            </summary>	
            <param name="blendState"><dd>  <p>Pointer to a blend-state interface (see <strong><see cref="T:SharpDX.Direct3D11.BlendState"/></strong>). Passing in <strong><c>null</c></strong> implies a default blend state. See remarks for further details.</p> </dd></param>
            <param name="blendFactor"><dd>  <p>Array of blend factors, one for each RGBA component. This requires a blend state object that specifies the <strong><see cref="F:SharpDX.Direct3D11.BlendOption.BlendFactor"/></strong> option.</p> </dd></param>	
            <param name="multiSampleMask"><dd>  <p>32-bit sample coverage. The default value is 0xffffffff. See remarks.</p> </dd></param>	
            <remarks>	
            <p>Blend state is used by the output-merger stage to determine how to blend together two pixel values. The two values are commonly the current pixel value and the pixel value already in the output render target. Use the <strong>blend operation</strong> to control where the two pixel values come from and how they are mathematically combined.</p><p>To create a blend-state interface, call <strong><see cref="M:SharpDX.Direct3D11.Device.CreateBlendState(SharpDX.Direct3D11.BlendStateDescription@,SharpDX.Direct3D11.BlendState)"/></strong>.</p><p>Passing in <strong><c>null</c></strong> for the blend-state interface indicates to the runtime to set a default blending state.  The following table indicates the default blending parameters.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>AlphaToCoverageEnable</td><td><strong><see cref="F:SharpDX.Result.False"/></strong></td></tr> <tr><td>BlendEnable</td><td><strong><see cref="F:SharpDX.Result.False"/></strong>[8]</td></tr> <tr><td>SrcBlend</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DstBlend</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOp</td><td><see cref="F:SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>SrcBlendAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DstBlendAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOpAlpha</td><td><see cref="F:SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTargetWriteMask[8]</td><td><see cref="F:SharpDX.Direct3D11.ColorWriteMaskFlags.All"/>[8]</td></tr> </table><p>?</p><p>A sample mask determines which samples get updated in all the active render targets. The mapping of bits in a sample mask to samples in a multisample render target is the responsibility of an individual application. A sample mask is always applied; it is independent of whether multisampling is enabled, and does not depend on whether an application uses multisample render targets.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p>	
            </remarks>	
            <msdn-id>ff476462</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::OMSetBlendState([In, Optional] ID3D11BlendState* pBlendState,[In, Optional] const SHARPDX_COLOR4* BlendFactor,[In] unsigned int SampleMask)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::OMSetBlendState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetDepthStencilState(SharpDX.Toolkit.Graphics.DepthStencilState,System.Int32)">
            <summary>	
            Sets the depth-stencil state of the output-merger stage.
            </summary>	
            <param name="depthStencilState"><dd>  <p>Pointer to a depth-stencil state interface (see <strong><see cref="T:SharpDX.Direct3D11.DepthStencilState"/></strong>) to bind to the device. Set this to <strong><c>null</c></strong> to use the default state listed in <strong><see cref="T:SharpDX.Direct3D11.DepthStencilStateDescription"/></strong>.</p> </dd></param>	
            <param name="stencilReference"><dd>  <p>Reference value to perform against when doing a depth-stencil test. See remarks.</p> </dd></param>	
            <remarks>	
            <p>To create a depth-stencil state interface, call <strong><see cref="M:SharpDX.Direct3D11.Device.CreateDepthStencilState(SharpDX.Direct3D11.DepthStencilStateDescription@,SharpDX.Direct3D11.DepthStencilState)"/></strong>.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p>	
            </remarks>	
            <msdn-id>ff476463</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::OMSetDepthStencilState([In, Optional] ID3D11DepthStencilState* pDepthStencilState,[In] unsigned int StencilRef)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::OMSetDepthStencilState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetRasterizerState(SharpDX.Toolkit.Graphics.RasterizerState)">
            <summary>	
            <p>Set the <strong>rasterizer state</strong> for the rasterizer stage of the pipeline.</p>	
            </summary>	
            <param name="rasterizerState">The rasterizser state to set on this device.</param>	
            <msdn-id>ff476479</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::RSSetState([In, Optional] ID3D11RasterizerState* pRasterizerState)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::RSSetState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetScissorRectangles(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Binds a single scissor rectangle to the rasterizer stage.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <remarks>	
            <p>All scissor rects must be set atomically as one operation. Any scissor rects not defined by the call are disabled.</p><p>The scissor rectangles will only be used if ScissorEnable is set to true in the rasterizer state (see <strong><see cref="T:SharpDX.Direct3D11.RasterizerStateDescription"/></strong>).</p><p>Which scissor rectangle to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader (see shader semantic syntax). If a geometry shader does not make use of the SV_ViewportArrayIndex semantic then Direct3D will use the first scissor rectangle in the array.</p><p>Each scissor rectangle in the array corresponds to a viewport in an array of viewports (see <strong><see cref="M:SharpDX.Direct3D11.RasterizerStage.SetViewports(SharpDX.ViewportF)"/></strong>).</p>	
            </remarks>	
            <msdn-id>ff476478</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::RSSetScissorRects([In] unsigned int NumRects,[In, Buffer, Optional] const void* pRects)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::RSSetScissorRects</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetScissorRectangles(SharpDX.Rectangle[])">
            <summary>
              Binds a set of scissor rectangles to the rasterizer stage.
            </summary>
            <param name="scissorRectangles">The set of scissor rectangles to bind.</param>
            <remarks>	
            <p>All scissor rects must be set atomically as one operation. Any scissor rects not defined by the call are disabled.</p><p>The scissor rectangles will only be used if ScissorEnable is set to true in the rasterizer state (see <strong><see cref="T:SharpDX.Direct3D11.RasterizerStateDescription"/></strong>).</p><p>Which scissor rectangle to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader (see shader semantic syntax). If a geometry shader does not make use of the SV_ViewportArrayIndex semantic then Direct3D will use the first scissor rectangle in the array.</p><p>Each scissor rectangle in the array corresponds to a viewport in an array of viewports (see <strong><see cref="M:SharpDX.Direct3D11.RasterizerStage.SetViewports(SharpDX.ViewportF)"/></strong>).</p>	
            </remarks>	
            <msdn-id>ff476478</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::RSSetScissorRects([In] unsigned int NumRects,[In, Buffer, Optional] const void* pRects)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::RSSetScissorRects</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.GetViewport(System.Int32)">
            <summary>
            Gets the viewport.
            </summary>
            <param name="index">The index.</param>
            <returns>Returns a viewport bind on a specified mulrendertarget</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetViewports(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Binds a single viewport to the rasterizer stage.
            </summary>
            <param name="x">The x coord of the viewport.</param>
            <param name="y">The x coord of the viewport.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="minZ">The min Z.</param>
            <param name="maxZ">The max Z.</param>
            <remarks>	
            <p></p><p>All viewports must be set atomically as one operation. Any viewports not defined by the call are disabled.</p><p>Which viewport to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader; if a geometry shader does not specify the semantic, Direct3D will use the first viewport in the array.</p>	
            </remarks>	
            <msdn-id>ff476480</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::RSSetViewports([In] unsigned int NumViewports,[In, Buffer, Optional] const void* pViewports)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::RSSetViewports</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetViewports(SharpDX.ViewportF)">
            <summary>
            Binds a single viewport to the rasterizer stage.
            </summary>
            <param name="viewport">The viewport.</param>
            <remarks>	
            <p></p><p>All viewports must be set atomically as one operation. Any viewports not defined by the call are disabled.</p><p>Which viewport to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader; if a geometry shader does not specify the semantic, Direct3D will use the first viewport in the array.</p>	
            </remarks>	
            <msdn-id>ff476480</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::RSSetViewports([In] unsigned int NumViewports,[In, Buffer, Optional] const void* pViewports)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::RSSetViewports</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetViewports(SharpDX.ViewportF[])">
            <summary>
              Binds a set of viewports to the rasterizer stage.
            </summary>
            <param name = "viewports">The set of viewports to bind.</param>
            <remarks>	
            <p></p><p>All viewports must be set atomically as one operation. Any viewports not defined by the call are disabled.</p><p>Which viewport to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader; if a geometry shader does not specify the semantic, Direct3D will use the first viewport in the array.</p>	
            </remarks>	
            <msdn-id>ff476480</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::RSSetViewports([In] unsigned int NumViewports,[In, Buffer, Optional] const void* pViewports)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::RSSetViewports</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.ResetTargets">
            <summary>
              Unbinds all depth-stencil buffer and render targets from the output-merger stage.
            </summary>
            <msdn-id>ff476464</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::OMSetRenderTargets([In] unsigned int NumViews,[In] const void** ppRenderTargetViews,[In, Optional] ID3D11DepthStencilView* pDepthStencilView)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::OMSetRenderTargets</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetRenderTargets(SharpDX.Direct3D11.RenderTargetView[])">
            <summary>	
            <p>Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage.</p>	
            </summary>	
            <param name = "renderTargetViews">A set of render target views to bind.</param>
            <remarks>	
            <p>The maximum number of active render targets a device can have active at any given time is set by a #define in D3D11.h called  D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT. It is invalid to try to set the same subresource to multiple render target slots.  Any render targets not defined by this call are set to <strong><c>null</c></strong>.</p><p>If any subresources are also currently bound for reading in a different stage or writing (perhaps in a different part of the pipeline),  those bind points will be set to <strong><c>null</c></strong>, in order to prevent the same subresource from being read and written simultaneously in a single rendering operation.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p><p>If the render-target views were created from an array resource type, then all of the render-target views must have the same array size.   This restriction also applies to the depth-stencil view, its array size must match that of the render-target views being bound.</p><p>The pixel shader must be able to simultaneously render to at least eight separate render targets. All of these render targets must access the same type of resource: Buffer, Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, or TextureCube. All render targets must have the same size in all dimensions (width and height, and depth for 3D or array size for *Array types). If render targets use multisample anti-aliasing, all bound render targets and depth buffer must be the same form of multisample resource (that is, the sample counts must be the same). Each render target can have a different data format. These render target formats are not required to have identical bit-per-element counts.</p><p>Any combination of the eight slots for render targets can have a render target set or not set.</p><p>The same resource view cannot be bound to multiple render target slots simultaneously. However, you can set multiple non-overlapping resource views of a single resource as simultaneous multiple render targets.</p>	
            </remarks>	
            <msdn-id>ff476464</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::OMSetRenderTargets([In] unsigned int NumViews,[In] const void** ppRenderTargetViews,[In, Optional] ID3D11DepthStencilView* pDepthStencilView)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::OMSetRenderTargets</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetRenderTargets(SharpDX.Direct3D11.RenderTargetView)">
            <summary>	
              Binds a single render target to the output-merger stage.
            </summary>	
            <param name = "renderTargetView">A view of the render target to bind.</param>
            <remarks>	
            <p>The maximum number of active render targets a device can have active at any given time is set by a #define in D3D11.h called  D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT. It is invalid to try to set the same subresource to multiple render target slots.  Any render targets not defined by this call are set to <strong><c>null</c></strong>.</p><p>If any subresources are also currently bound for reading in a different stage or writing (perhaps in a different part of the pipeline),  those bind points will be set to <strong><c>null</c></strong>, in order to prevent the same subresource from being read and written simultaneously in a single rendering operation.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p><p>If the render-target views were created from an array resource type, then all of the render-target views must have the same array size.   This restriction also applies to the depth-stencil view, its array size must match that of the render-target views being bound.</p><p>The pixel shader must be able to simultaneously render to at least eight separate render targets. All of these render targets must access the same type of resource: Buffer, Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, or TextureCube. All render targets must have the same size in all dimensions (width and height, and depth for 3D or array size for *Array types). If render targets use multisample anti-aliasing, all bound render targets and depth buffer must be the same form of multisample resource (that is, the sample counts must be the same). Each render target can have a different data format. These render target formats are not required to have identical bit-per-element counts.</p><p>Any combination of the eight slots for render targets can have a render target set or not set.</p><p>The same resource view cannot be bound to multiple render target slots simultaneously. However, you can set multiple non-overlapping resource views of a single resource as simultaneous multiple render targets.</p>	
            </remarks>	
            <msdn-id>ff476464</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::OMSetRenderTargets([In] unsigned int NumViews,[In] const void** ppRenderTargetViews,[In, Optional] ID3D11DepthStencilView* pDepthStencilView)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::OMSetRenderTargets</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetRenderTargets(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a depth-stencil buffer and a set of render targets to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "renderTargetViews">A set of render target views to bind.</param>
            <remarks>	
            <p>The maximum number of active render targets a device can have active at any given time is set by a #define in D3D11.h called  D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT. It is invalid to try to set the same subresource to multiple render target slots.  Any render targets not defined by this call are set to <strong><c>null</c></strong>.</p><p>If any subresources are also currently bound for reading in a different stage or writing (perhaps in a different part of the pipeline),  those bind points will be set to <strong><c>null</c></strong>, in order to prevent the same subresource from being read and written simultaneously in a single rendering operation.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p><p>If the render-target views were created from an array resource type, then all of the render-target views must have the same array size.   This restriction also applies to the depth-stencil view, its array size must match that of the render-target views being bound.</p><p>The pixel shader must be able to simultaneously render to at least eight separate render targets. All of these render targets must access the same type of resource: Buffer, Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, or TextureCube. All render targets must have the same size in all dimensions (width and height, and depth for 3D or array size for *Array types). If render targets use multisample anti-aliasing, all bound render targets and depth buffer must be the same form of multisample resource (that is, the sample counts must be the same). Each render target can have a different data format. These render target formats are not required to have identical bit-per-element counts.</p><p>Any combination of the eight slots for render targets can have a render target set or not set.</p><p>The same resource view cannot be bound to multiple render target slots simultaneously. However, you can set multiple non-overlapping resource views of a single resource as simultaneous multiple render targets.</p>	
            </remarks>	
            <msdn-id>ff476464</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::OMSetRenderTargets([In] unsigned int NumViews,[In] const void** ppRenderTargetViews,[In, Optional] ID3D11DepthStencilView* pDepthStencilView)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::OMSetRenderTargets</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetRenderTargets(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.RenderTargetView)">
            <summary>
              Binds a depth-stencil buffer and a single render target to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "renderTargetView">A view of the render target to bind.</param>
            <remarks>	
            <p>The maximum number of active render targets a device can have active at any given time is set by a #define in D3D11.h called  D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT. It is invalid to try to set the same subresource to multiple render target slots.  Any render targets not defined by this call are set to <strong><c>null</c></strong>.</p><p>If any subresources are also currently bound for reading in a different stage or writing (perhaps in a different part of the pipeline),  those bind points will be set to <strong><c>null</c></strong>, in order to prevent the same subresource from being read and written simultaneously in a single rendering operation.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p><p>If the render-target views were created from an array resource type, then all of the render-target views must have the same array size.   This restriction also applies to the depth-stencil view, its array size must match that of the render-target views being bound.</p><p>The pixel shader must be able to simultaneously render to at least eight separate render targets. All of these render targets must access the same type of resource: Buffer, Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, or TextureCube. All render targets must have the same size in all dimensions (width and height, and depth for 3D or array size for *Array types). If render targets use multisample anti-aliasing, all bound render targets and depth buffer must be the same form of multisample resource (that is, the sample counts must be the same). Each render target can have a different data format. These render target formats are not required to have identical bit-per-element counts.</p><p>Any combination of the eight slots for render targets can have a render target set or not set.</p><p>The same resource view cannot be bound to multiple render target slots simultaneously. However, you can set multiple non-overlapping resource views of a single resource as simultaneous multiple render targets.</p>	
            </remarks>	
            <msdn-id>ff476464</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::OMSetRenderTargets([In] unsigned int NumViews,[In] const void** ppRenderTargetViews,[In, Optional] ID3D11DepthStencilView* pDepthStencilView)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::OMSetRenderTargets</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetIndexBuffer(SharpDX.Toolkit.Graphics.Buffer,System.Boolean,System.Int32)">
            <summary>	
            <p>Bind an index buffer to the input-assembler stage.</p>	
            </summary>	
            <param name="indexBuffer"><dd>  <p>A reference to an <strong><see cref="T:SharpDX.Direct3D11.Buffer"/></strong> object, that contains indices. The index buffer must have been created with  the <strong><see cref="F:SharpDX.Direct3D11.BindFlags.IndexBuffer"/></strong> flag.</p> </dd></param>	
            <param name="is32Bit">Set to true if indices are 32-bit values (integer size) or false if they are 16-bit values (short size)</param>	
            <param name="offset">Offset (in bytes) from the start of the index buffer to the first index to use. Default to 0</param>	
            <remarks>	
            <p>For information about creating index buffers, see How to: Create an Index Buffer.</p><p>Calling this method using a buffer that is currently bound for writing (i.e. bound to the stream output pipeline stage) will effectively bind  <strong><c>null</c></strong> instead because a buffer cannot be bound as both an input and an output at the same time.</p><p>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will  not prevent invalid data from being used by the runtime.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p>	
            </remarks>	
            <msdn-id>ff476453</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::IASetIndexBuffer([In, Optional] ID3D11Buffer* pIndexBuffer,[In] DXGI_FORMAT Format,[In] unsigned int Offset)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::IASetIndexBuffer</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetVertexInputLayout(SharpDX.Toolkit.Graphics.VertexInputLayout)">
            <summary>
            Sets the vertex input layout.
            </summary>
            <param name="inputLayout">The input layout.</param>
            <msdn-id>ff476454</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::IASetInputLayout([In, Optional] ID3D11InputLayout* pInputLayout)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::IASetInputLayout</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetVertexBuffer``1(SharpDX.Toolkit.Graphics.Buffer{``0},System.Int32)">
            <summary>
            Bind a vertex buffer on the slot #0 of the input-assembler stage.
            </summary>	
            <param name="vertexBuffer">The vertex buffer to bind to this slot. This vertex buffer must have been created with the <strong><see cref="F:SharpDX.Direct3D11.BindFlags.VertexBuffer"/></strong> flag.</param>	
            <param name="vertexIndex">The index is the number of vertex element between the first element of a vertex buffer and the first element that will be used.</param>	
            <remarks>	
            <p>For information about creating vertex buffers, see Create a Vertex Buffer.</p><p>Calling this method using a buffer that is currently bound for writing (i.e. bound to the stream output pipeline stage) will effectively bind <strong><c>null</c></strong> instead because a buffer cannot be bound as both an input and an output at the same time.</p><p>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p>	
            </remarks>	
            <msdn-id>ff476456</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::IASetVertexBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer] const void* ppVertexBuffers,[In, Buffer] const void* pStrides,[In, Buffer] const void* pOffsets)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::IASetVertexBuffers</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetVertexBuffer``1(System.Int32,SharpDX.Toolkit.Graphics.Buffer{``0},System.Int32)">
            <summary>
            Bind a verte buffer to the input-assembler stage.
            </summary>	
            <param name="slot">The first input slot for binding.</param>	
            <param name="vertexBuffer">The vertex buffer to bind to this slot. This vertex buffer must have been created with the <strong><see cref="F:SharpDX.Direct3D11.BindFlags.VertexBuffer"/></strong> flag.</param>	
            <param name="vertexIndex">The index is the number of vertex element between the first element of a vertex buffer and the first element that will be used.</param>	
            <remarks>	
            <p>For information about creating vertex buffers, see Create a Vertex Buffer.</p><p>Calling this method using a buffer that is currently bound for writing (i.e. bound to the stream output pipeline stage) will effectively bind <strong><c>null</c></strong> instead because a buffer cannot be bound as both an input and an output at the same time.</p><p>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p>	
            </remarks>	
            <msdn-id>ff476456</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::IASetVertexBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer] const void* ppVertexBuffers,[In, Buffer] const void* pStrides,[In, Buffer] const void* pOffsets)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::IASetVertexBuffers</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.SetVertexBuffer(System.Int32,SharpDX.Direct3D11.Buffer,System.Int32,System.Int32)">
            <summary>
            <p>Bind a verte buffer to the input-assembler stage.</p>	
            </summary>	
            <param name="slot">The first input slot for binding.</param>	
            <param name="vertexBuffer">The vertex buffer to bind to this slot. This vertex buffer must have been created with the <strong><see cref="F:SharpDX.Direct3D11.BindFlags.VertexBuffer"/></strong> flag.</param>	
            <param name="vertexStride">The vertexStride is the size (in bytes) of the elements that are to be used from that vertex buffer.</param>	
            <param name="offsetInBytes">The offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</param>	
            <remarks>	
            <p>For information about creating vertex buffers, see Create a Vertex Buffer.</p><p>Calling this method using a buffer that is currently bound for writing (i.e. bound to the stream output pipeline stage) will effectively bind <strong><c>null</c></strong> instead because a buffer cannot be bound as both an input and an output at the same time.</p><p>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.</p><p> The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. </p>	
            </remarks>	
            <msdn-id>ff476456</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::IASetVertexBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer] const void* ppVertexBuffers,[In, Buffer] const void* pStrides,[In, Buffer] const void* pOffsets)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::IASetVertexBuffers</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.ResetVertexBuffers">
            <summary>
            Resets all vertex buffers bounded to a slot range. By default, It clears all the bounded buffers. See remarks.
            </summary>	
            <remarks>
            This is sometimes required to unding explicitly vertex buffers bounding to the input shader assembly, when a
            vertex buffer is used as the output of the pipeline.
            </remarks>
            <msdn-id>ff476456</msdn-id>	
            <unmanaged>void ID3D11DeviceContext::IASetVertexBuffers([In] unsigned int StartSlot,[In] unsigned int NumBuffers,[In, Buffer] const void* ppVertexBuffers,[In, Buffer] const void* pStrides,[In, Buffer] const void* pOffsets)</unmanaged>	
            <unmanaged-short>ID3D11DeviceContext::IASetVertexBuffers</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Present">
            <summary>
            Presents the Backbuffer to the screen.
            </summary>
            <remarks>
            This method is only working if a <see cref="T:SharpDX.Toolkit.Graphics.GraphicsPresenter"/> is set on this device using <see cref="P:SharpDX.Toolkit.Graphics.GraphicsDevice.Presenter"/> property.
            </remarks>
            <msdn-id>bb174576</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::Present([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS Flags)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::Present</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.GetOrCreateSharedData``1(SharpDX.Toolkit.Graphics.SharedDataType,System.Object,SharpDX.Toolkit.Graphics.GraphicsDevice.CreateSharedData{``0})">
            <summary>
            Gets a shared data for this device context with a delegate to create the shared data if it is not present.
            </summary>
            <typeparam name="T">Type of the shared data to get/create.</typeparam>
            <param name="type">Type of the data to share.</param>
            <param name="key">The key of the shared data.</param>
            <param name="sharedDataCreator">The shared data creator.</param>
            <returns>An instance of the shared data. The shared data will be disposed by this <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/> instance.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.GraphicsDevice.GetOrCreateInputSignatureManager(System.Byte[],System.Int32)">
            <summary>
            Gets or create an input signature manager for a particular signature.
            </summary>
            <param name="signatureBytecode">The signature bytecode.</param>
            <param name="signatureHashcode">The signature hashcode.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsDevice.BackBuffer">
            <summary>
            Gets the back buffer sets by the current <see cref="P:SharpDX.Toolkit.Graphics.GraphicsDevice.Presenter"/> setup on this device.
            </summary>
            <value>The back buffer. The returned value may be null if no <see cref="T:SharpDX.Toolkit.Graphics.GraphicsPresenter"/> are setup on this device.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsDevice.DepthStencilBuffer">
            <summary>
            Gets the depth stencil buffer sets by the current <see cref="P:SharpDX.Toolkit.Graphics.GraphicsDevice.Presenter"/> setup on this device.
            </summary>
            <value>The depth stencil buffer. The returned value may be null if no <see cref="T:SharpDX.Toolkit.Graphics.GraphicsPresenter"/> are setup on this device or no depth buffer was allocated.</value>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsDevice.Presenter">
            <summary>
            Gets or sets the current presenter use by the <see cref="M:SharpDX.Toolkit.Graphics.GraphicsDevice.Present"/> method.
            </summary>
            <value>The current presenter.</value>
        </member>
        <member name="E:SharpDX.Toolkit.Graphics.GraphicsDevice.DeviceLost">
            <summary>
            Occurs when the device is going to be lost (for example before a reset).
            </summary>
        </member>
        <member name="E:SharpDX.Toolkit.Graphics.GraphicsDevice.DeviceReset">
            <summary>
            Occurs when a device is reset and an application needs to recreate all dependent resources.
            </summary>
        </member>
        <member name="E:SharpDX.Toolkit.Graphics.GraphicsDevice.DeviceResetting">
            <summary>
            Occurs when a device is resetting.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsDevice.GraphicsDeviceStatus">
            <summary>
            Gets the status of this device.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.GraphicsDevice.Viewport">
            <summary>
            Gets the main viewport.
            </summary>
            <value>The main viewport.</value>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.GraphicsDevice.CreateSharedData`1">
            <summary>
            A delegate called to create shareable data. See remarks.
            </summary>
            <typeparam name="T">Type of the data to create.</typeparam>
            <returns>A new instance of the data to share.</returns>
            <remarks>
            Because this method is being called from a lock region, this method should not be time consuming.
            </remarks>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.IPixelData">
            <summary>
            Interface used to write to an arbitrary pixel data structure.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.IPixelData.Format">
            <summary>
            Gets the associated <see cref="T:SharpDX.Toolkit.Graphics.PixelFormat"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.IPixelData.Value">
            <summary>
            Gets or sets the color on this pixel data as a HDR <see cref="T:SharpDX.Color4"/> (128 bit, 4 x floats) .
            </summary>
        </member>
        <member name="P:SharpDX.Toolkit.Graphics.IPixelData.Value32Bpp">
            <summary>
            Gets or sets the color on this pixel data as a LDR <see cref="T:SharpDX.Color"/> (32 bit, 1 x int) .
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelData">
            <summary>
            Provides typed structure to read and write to some <see cref="T:SharpDX.Toolkit.Graphics.PixelFormat"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelData.R8">
            <summary>
            Pixel format associated to <see cref="F:SharpDX.Toolkit.Graphics.PixelFormat.R8.UNorm"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelData.R8G8">
            <summary>
            Pixel format associated to <see cref="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8.UNorm"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelData.R8G8B8A8">
            <summary>
            Pixel format associated to <see cref="F:SharpDX.Toolkit.Graphics.PixelFormat.R8G8B8A8.UNorm"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelData.R16">
            <summary>
            Pixel format associated to <see cref="F:SharpDX.Toolkit.Graphics.PixelFormat.R16.UNorm"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelData.R16G16">
            <summary>
            Pixel format associated to <see cref="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16.UNorm"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelData.R16G16B16A16">
            <summary>
            Pixel format associated to <see cref="F:SharpDX.Toolkit.Graphics.PixelFormat.R16G16B16A16.UNorm"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.PixelFormat">
            <summary>
            PixelFormat is equivalent to <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
            <remarks>
            This structure is implicitly castable to and from <see cref="T:SharpDX.DXGI.Format"/>, you can use it inplace where <see cref="T:SharpDX.DXGI.Format"/> is required
            and vice-versa.
            Usage is slightly different from <see cref="T:SharpDX.DXGI.Format"/>, as you have to select the type of the pixel format first (<see cref="!:Typeless"/>, <see cref="!:SInt"/>...etc)
            and then access the available pixel formats for this type. Example: PixelFormat.UNorm.R8.
            </remarks>
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.PixelFormat.Value">
            <summary>
            Gets the value as a <see cref="T:SharpDX.DXGI.Format"/> enum.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.PixelFormat.#ctor(SharpDX.DXGI.Format)">
            <summary>
            Internal constructor.
            </summary>
            <param name="format"></param>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.RenderTarget2D">
            <summary>
            A RenderTarget2D frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <remarks>
            This class instantiates a <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> with the binding flags <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/>.
            This class is also castable to <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.op_Implicit(SharpDX.Toolkit.Graphics.RenderTarget2D)~SharpDX.Direct3D11.RenderTargetView">
            <summary>
            RenderTargetView casting operator.
            </summary>
            <param name="from">Source for the.</param>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> from a <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> from a <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.RenderTargetView,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> from a <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="renderTargetView">The native texture <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MSAALevel,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> using multisampling.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="multiSampleCount">The multisample count.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.CreateDescription(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new texture description for a <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.CreateDescription(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,System.Int32)">
            <summary>
            Creates a new texture description <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.RenderTarget2D.CreateDescription(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,System.Int32,SharpDX.Toolkit.Graphics.MSAALevel,SharpDX.Toolkit.Graphics.PixelFormat,System.Int32)">
            <summary>
            Creates a new texture description <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> using multisampling.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="multiSampleCount">The multisample count.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.RenderTarget2D"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureCube">
            <summary>
            A TextureCube frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Creates a new texture from a <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="T:SharpDX.Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.MipMapCount,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <returns>
            A new instance of <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> class.
            </returns>
            <msdn-id>ff476521</msdn-id>	
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>	
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New``1(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,``0[][],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> from a initial data..
            </summary>
            <typeparam name="T">Type of a pixel data</typeparam>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="textureData">an array of 6 textures. See remarks</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (TextureCube Array), the second is the texture data for a particular cube face.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,System.Int32,SharpDX.Toolkit.Graphics.PixelFormat,SharpDX.DataBox[],SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> from a initial data..
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="textureData">an array of 6 textures. See remarks</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (TextureCube Array), the second is the texture data for a particular cube face.
            </remarks>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.New(SharpDX.Toolkit.Graphics.GraphicsDevice,SharpDX.Toolkit.Graphics.Image,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Creates a new <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> directly from an <see cref="T:SharpDX.Toolkit.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.IO.Stream,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a Cube texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type Cube</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureCube.Load(SharpDX.Toolkit.Graphics.GraphicsDevice,System.String,SharpDX.Toolkit.Graphics.TextureFlags,SharpDX.Direct3D11.ResourceUsage)">
            <summary>
            Loads a Cube texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SharpDX.Toolkit.Graphics.GraphicsDevice"/>.</param>
            <param name="filePath">The file to load the texture from.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type Cube</exception>
            <returns>A texture</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            A Common description for all textures.
            </summary>
            <remarks>
            This class exposes the union of all fields exposed by fields in <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>, 
            <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.
            It provides also 2-way implicit conversions for 1D, 2D, 3D textures descriptions.
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Dimension">
            <summary>
            The dimension of a texture.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Width">
            <summary>	
            <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is valid for all textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Height">
            <summary>	
            <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476254</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Depth">
            <summary>	
            <dd> <p>Texture depth (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture3D"/>.
            </remarks>
            <msdn-id>ff476254</msdn-id>	
            <unmanaged>unsigned int Depth</unmanaged>	
            <unmanaged-short>unsigned int Depth</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.ArraySize">
            <summary>	
            <dd> <p>Number of textures in the array. The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DArraySize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>
            </remarks>
            <remarks>
            This field is only valid for textures: <see cref="T:SharpDX.Toolkit.Graphics.Texture1D"/>, <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/> and <see cref="T:SharpDX.Toolkit.Graphics.TextureCube"/>.
            </remarks>
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int ArraySize</unmanaged>	
            <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.MipLevels">
            <summary>	
            <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>unsigned int MipLevels</unmanaged>	
            <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Format">
            <summary>	
            <dd> <p>Texture format (see <strong><see cref="T:SharpDX.DXGI.Format"/></strong>).</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.SampleDescription">
            <summary>	
            <dd> <p>Structure that specifies multisampling parameters for the texture. See <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong>.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SharpDX.Toolkit.Graphics.Texture2D"/>.
            </remarks>
            <msdn-id>ff476253</msdn-id>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
            <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.Usage">
            <summary>	
            <dd> <p>Value that identifies how the texture is to be read from and written to. The most common value is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="T:SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>D3D11_USAGE Usage</unmanaged>	
            <unmanaged-short>D3D11_USAGE Usage</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.BindFlags">
            <summary>	
            <dd> <p>Flags (see <strong><see cref="T:SharpDX.Direct3D11.BindFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR. For a 1D texture, the allowable values are: <see cref="F:SharpDX.Direct3D11.BindFlags.ShaderResource"/>, <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/> and <see cref="F:SharpDX.Direct3D11.BindFlags.DepthStencil"/>.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>	
            <unmanaged-short>D3D11_BIND_FLAG BindFlags</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.CpuAccessFlags">
            <summary>	
            <dd> <p>Flags (see <strong><see cref="T:SharpDX.Direct3D11.CpuAccessFlags"/></strong>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>	
            <unmanaged-short>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged-short>	
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.TextureDescription.OptionFlags">
            <summary>	
            <dd> <p>Flags (see <strong><see cref="T:SharpDX.Direct3D11.ResourceOptionFlags"/></strong>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR.</p> </dd>	
            </summary>	
            <msdn-id>ff476252</msdn-id>	
            <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>	
            <unmanaged-short>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.ToStagingDescription">
            <summary>
            Gets the staging description for this instance..
            </summary>
            <returns>A Staging description</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Direct3D11.Texture1DDescription)~SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.TextureDescription)~SharpDX.Direct3D11.Texture1DDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/> to <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Direct3D11.Texture2DDescription)~SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.TextureDescription)~SharpDX.Direct3D11.Texture2DDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/> to <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Direct3D11.Texture3DDescription)~SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.TextureDescription)~SharpDX.Direct3D11.Texture3DDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/> to <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.
            </summary>
            <param name="description">The texture description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.ImageDescription)~SharpDX.Toolkit.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.ImageDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The image description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.TextureDescription.op_Implicit(SharpDX.Toolkit.Graphics.TextureDescription)~SharpDX.Toolkit.Graphics.ImageDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Toolkit.Graphics.ImageDescription"/> to <see cref="T:SharpDX.Toolkit.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The image description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.VertexPositionColor">
            <summary>
            Describes a custom vertex format structure that contains position and color information. 
            </summary>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.VertexPositionColor.#ctor(SharpDX.Vector3,SharpDX.Color)">
            <summary>
            Initializes a new <see cref="T:SharpDX.Toolkit.Graphics.VertexPositionColor"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="color">The color of this vertex.</param>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionColor.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.VertexPositionColor.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="T:SharpDX.Toolkit.Graphics.ViewType">
            <summary>
            Defines how a view is selected from a resource.
            </summary>
            <remarks>
            This selection model is taken from Nuaj by Patapom (http://wiki.patapom.com/index.php/Nuaj)
            </remarks>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ViewType.Full">
            <summary>
            Gets a texture view for the whole texture for all mips/arrays dimensions.
            </summary>
            <example>Here is what the view covers with whatever mipLevelIndex/arrayIndex
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |   X  |   X  |   X  |
                  |------+------+------|
             Mip1 |   X  |   X  |   X  |
                  |------+------+------|
             Mip2 |   X  |   X  |   X  |
                  ----------------------
            </example>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ViewType.Single">
            <summary>
            Gets a single texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains a single texture element at the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |      |
                  |------+------+------|
             Mip2 |      |      |      |
                  ----------------------
            </example>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ViewType.ArrayBand">
            <summary>
            Gets a band texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains all the mip level texture elements from the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |      |
                  |------+------+------|
             Mip2 |      |  X   |      |
                  ----------------------
            </example>
        </member>
        <member name="F:SharpDX.Toolkit.Graphics.ViewType.MipBand">
            <summary>
            Gets a band texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains all the array texture elements from the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |  X   |
                  |------+------+------|
             Mip2 |      |      |      |
                  ----------------------
            </example>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.WICHelper.ToDXGI(System.Guid)">
            <summary>
            Converts a WIC <see cref="T:SharpDX.WIC.PixelFormat"/> to a <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
            <param name="guid">A WIC <see cref="T:SharpDX.WIC.PixelFormat"/> </param>
            <returns>A <see cref="T:SharpDX.DXGI.Format"/></returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.WICHelper.ToWIC(SharpDX.DXGI.Format,System.Guid@)">
            <summary>
            Converts a <see cref="T:SharpDX.DXGI.Format"/> to a a WIC <see cref="T:SharpDX.WIC.PixelFormat"/>.
            </summary>
            <param name="format">A <see cref="T:SharpDX.DXGI.Format"/></param>
            <param name="guid">A WIC <see cref="T:SharpDX.WIC.PixelFormat"/> Guid.</param>
            <returns>True if conversion succeed, false otherwise.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.WICHelper.GetBitsPerPixel(System.Guid)">
            <summary>
            Gets the number of bits per pixels for a WIC <see cref="T:SharpDX.WIC.PixelFormat"/> Guid.
            </summary>
            <param name="targetGuid">A WIC <see cref="T:SharpDX.WIC.PixelFormat"/> Guid.</param>
            <returns>The number of bits per pixels for a WIC. If this method is failing to calculate the number of pixels, return 0.</returns>
        </member>
        <member name="M:SharpDX.Toolkit.Graphics.WICHelper.DecodeMetadata(SharpDX.Toolkit.Graphics.WICFlags,SharpDX.WIC.BitmapDecoder,SharpDX.WIC.BitmapFrameDecode,System.Guid@)">
            <summary>
            Determines metadata for image
            </summary>
            <param name="flags">The flags.</param>
            <param name="decoder">The decoder.</param>
            <param name="frame">The frame.</param>
            <param name="pixelFormat">The pixel format.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">If pixel format is not supported.</exception>
        </member>
    </members>
</doc>
